id: /soml/cim
label: CIM
objects:
  ACDCTerminal:
    descr: An electrical connection point (AC or DC) to a piece of conducting equipment. Terminals are connected at physical connection points called connectivity nodes
    inherits: ACDCTerminalInterface
    label: ACDCTerminal
    type: cim:ACDCTerminal
  ACDCTerminalInterface:
    descr: Abstract superclass of ACDCTerminal
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      aCDCTerminal.OperationalLimitSet: {}
      aCDCTerminal.connected: {}
      aCDCTerminal.sequenceNumber: {}
  ACLineSegment:
    descr: 'A wire or combination of wires, with consistent electrical characteristics, building a single electrical system, used to carry alternating current between points in the power system. For symmetrical, transposed three phase lines, it is sufficient to use attributes of the line segment, which describe impedances and admittances for the entire length of the segment.  Additionally impedances can be computed by using length and associated per length impedances. The BaseVoltage at the two ends of ACLineSegments'
    inherits: ConductorInterface
    label: ACLineSegment
    props:
      aCLineSegment.b0ch: {}
      aCLineSegment.bch: {}
      aCLineSegment.g0ch: {}
      aCLineSegment.gch: {}
      aCLineSegment.r: {}
      aCLineSegment.r0: {}
      aCLineSegment.shortCircuitEndTemperature: {}
      aCLineSegment.x: {}
      aCLineSegment.x0: {}
    type: cim:ACLineSegment
  ActivePowerLimit:
    descr: Limit on active power flow
    inherits: OperationalLimitInterface
    label: ActivePowerLimit
    props:
      activePowerLimit.normalValue: {}
      activePowerLimit.value: {}
    type: cim:ActivePowerLimit
  Analog:
    descr: Analog represents an analog Measurement
    inherits: MeasurementInterface
    label: Analog
    props:
      analog.AnalogValues: {}
      analog.positiveFlowIn: {}
      cimr:measurement.isInCognite: {}
    type: cim:Analog
  AnalogValue:
    descr: AnalogValue represents an analog MeasurementValue
    inherits: MeasurementValueInterface
    label: AnalogValue
    props:
      analogValue.Analog: {}
    type: cim:AnalogValue
  AsynchronousMachineKind:
    descr: Kind of Asynchronous Machine
    label: AsynchronousMachineKind
    type: cim:AsynchronousMachineKind
  AuxiliaryEquipment:
    descr: |-
      AuxiliaryEquipment describe equipment that is not performing any primary functions but support for the equipment performing the primary function.
      AuxiliaryEquipment is attached to primary equipment via an association with Terminal
    inherits: AuxiliaryEquipmentInterface
    label: AuxiliaryEquipment
    type: cim:AuxiliaryEquipment
  AuxiliaryEquipmentInterface:
    descr: Abstract superclass of AuxiliaryEquipment
    inherits: EquipmentInterface
    kind: abstract
    props:
      auxiliaryEquipment.Terminal: {}
  BaseVoltage:
    descr: Defines a system base voltage which is referenced
    inherits: IdentifiedObjectInterface
    label: BaseVoltage
    props:
      baseVoltage.ConductingEquipment: {}
      baseVoltage.TopologicalNode: {}
      baseVoltage.TransformerEnds: {}
      baseVoltage.VoltageLevel: {}
      baseVoltage.nominalVoltage: {}
    type: cim:BaseVoltage
  BatteryStateKind:
    descr: The state of the battery unit
    label: BatteryStateKind
    type: cim:BatteryStateKind
  Bay:
    descr: 'A collection of power system resources (within a given substation) including conducting equipment, protection relays, measurements, and telemetry.  A bay typically represents a physical grouping related to modularization of equipment'
    inherits: EquipmentContainerInterface
    label: Bay
    props:
      bay.VoltageLevel: {}
    type: cim:Bay
  Breaker:
    descr: 'A mechanical switching device capable of making, carrying, and breaking currents under normal circuit conditions and also making, carrying for a specified time, and breaking currents under specified abnormal circuit conditions e.g.  those of short circuit'
    inherits: ProtectedSwitchInterface
    label: Breaker
    type: cim:Breaker
  BusbarSection:
    descr: |-
      A conductor, or group of conductors, with negligible impedance, that serve to connect other conducting equipment within a single substation. 
      Voltage measurements are typically obtained from voltage transformers that are connected to busbar sections. A bus bar section may have many physical terminals but for analysis is modelled with exactly one logical terminal
    inherits: ConnectorInterface
    label: BusbarSection
    props:
      busbarSection.ipMax: {}
    type: cim:BusbarSection
  ConductingEquipment:
    descr: The parts of the AC power system that are designed to carry current or that are conductively connected through terminals
    inherits: ConductingEquipmentInterface
    label: ConductingEquipment
    type: cim:ConductingEquipment
  ConductingEquipmentInterface:
    descr: Abstract superclass of ConductingEquipment
    inherits: EquipmentInterface
    kind: abstract
    props:
      conductingEquipment.BaseVoltage: {}
      conductingEquipment.SvStatus: {}
      conductingEquipment.Terminals: {}
  Conductor:
    descr: 'Combination of conducting material with consistent electrical characteristics, building a single electrical system, used to carry current between points in the power system'
    inherits: ConductorInterface
    label: Conductor
    type: cim:Conductor
  ConductorInterface:
    descr: Abstract superclass of Conductor
    inherits: ConductingEquipmentInterface
    kind: abstract
    props:
      conductor.length: {}
  ConformLoad:
    descr: ConformLoad represent loads that follow a daily load change pattern where the pattern can be used to scale the load with a system load
    inherits: EnergyConsumerInterface
    label: ConformLoad
    props:
      conformLoad.LoadGroup: {}
    type: cim:ConformLoad
  ConformLoadGroup:
    descr: A group of loads conforming to an allocation pattern
    inherits: LoadGroupInterface
    label: ConformLoadGroup
    props:
      conformLoadGroup.EnergyConsumers: {}
    type: cim:ConformLoadGroup
  ConnectivityNode:
    descr: Connectivity nodes are points where terminals of AC conducting equipment are connected together with zero impedance
    inherits: IdentifiedObjectInterface
    label: ConnectivityNode
    props:
      connectivityNode.ConnectivityNodeContainer: {}
      connectivityNode.Terminals: {}
      connectivityNode.TopologicalNode: {}
      eu:connectivityNode.BoundaryPoint: {}
    type: cim:ConnectivityNode
  ConnectivityNodeContainer:
    descr: A base class for all objects that may contain connectivity nodes or topological nodes
    inherits: ConnectivityNodeContainerInterface
    label: ConnectivityNodeContainer
    type: cim:ConnectivityNodeContainer
  ConnectivityNodeContainerInterface:
    descr: Abstract superclass of ConnectivityNodeContainer
    inherits: cimr:EquipmentOrContainerInterface
    kind: abstract
    props:
      connectivityNodeContainer.ConnectivityNodes: {}
      connectivityNodeContainer.TopologicalNode: {}
  Connector:
    descr: 'A conductor, or group of conductors, with negligible impedance, that serve to connect other conducting equipment within a single substation and are modelled with a single logical terminal'
    inherits: ConnectorInterface
    label: Connector
    type: cim:Connector
  ConnectorInterface:
    descr: Abstract superclass of Connector
    inherits: ConductingEquipmentInterface
    kind: abstract
  Contingency:
    descr: 'An event threatening system reliability, consisting of one or more contingency elements'
    inherits: ContingencyInterface
    label: Contingency
    type: cim:Contingency
  ContingencyElement:
    descr: 'An element of a system event to be studied by contingency analysis, representing a change in status of a single piece of equipment'
    inherits: ContingencyElementInterface
    label: ContingencyElement
    type: cim:ContingencyElement
  ContingencyElementInterface:
    descr: Abstract superclass of ContingencyElement
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      contingencyElement.Contingency: {}
  ContingencyEquipment:
    descr: 'Equipment whose in service status is to change, such as a power transformer or AC line segment'
    inherits: ContingencyElementInterface
    label: ContingencyEquipment
    props:
      contingencyEquipment.Equipment: {}
      contingencyEquipment.contingentStatus: {}
    type: cim:ContingencyEquipment
  ContingencyEquipmentStatusKind:
    descr: Indicates the state which the contingency equipment is to be in when the contingency is applied
    label: ContingencyEquipmentStatusKind
    type: cim:ContingencyEquipmentStatusKind
  ContingencyInterface:
    descr: Abstract superclass of Contingency
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      contingency.ContingencyElement: {}
      contingency.mustStudy: {}
      nc:contingency.EquipmentOperator: {}
      nc:contingency.normalMustStudy: {}
      nc:contingency.normalProbability: {}
      nc:contingency.probability: {}
  ControlArea:
    descr: 'A control area is a grouping of generating units and/or loads and a cutset of tie lines (as terminals) which may be used for a variety of purposes including automatic generation control, power flow solution area interchange control specification, and input to load forecasting. All generation and load within the area defined by the terminals on the border are considered in the area interchange control. Note that any number of overlapping control area specifications can be superimposed on the physical'
    inherits: PowerSystemResourceInterface
    label: ControlArea
    props:
      controlArea.ControlAreaGeneratingUnit: {}
      controlArea.EnergyArea: {}
      controlArea.netInterchange: {}
      controlArea.pTolerance: {}
      controlArea.type: {}
      nc:controlArea.SchedulingArea: {}
    type: cim:ControlArea
  ControlAreaGeneratingUnit:
    descr: A control area generating unit. This class is needed so that alternate control area definitions may include the same generating unit.   It should be noted that only one instance within a control area should reference a specific generating unit
    inherits: IdentifiedObjectInterface
    label: ControlAreaGeneratingUnit
    props:
      controlAreaGeneratingUnit.ControlArea: {}
      controlAreaGeneratingUnit.GeneratingUnit: {}
    type: cim:ControlAreaGeneratingUnit
  ControlAreaTypeKind:
    descr: The type of control area
    label: ControlAreaTypeKind
    type: cim:ControlAreaTypeKind
  CoordinateSystem:
    descr: Coordinate reference system
    inherits: IdentifiedObjectInterface
    label: CoordinateSystem
    props:
      coordinateSystem.Locations: {}
      coordinateSystem.crsUrn: {}
    type: cim:CoordinateSystem
  CsOperatingModeKind:
    descr: Operating mode for HVDC line operating as Current Source Converter
    label: CsOperatingModeKind
    type: cim:CsOperatingModeKind
  CsPpccControlKind:
    descr: Active power control modes for HVDC line operating as Current Source Converter
    label: CsPpccControlKind
    type: cim:CsPpccControlKind
  Currency:
    descr: Monetary currencies.  ISO 4217 standard including 3-character currency code
    label: Currency
    type: cim:Currency
  CurrentLimit:
    descr: Operational limit on current
    inherits: OperationalLimitInterface
    label: CurrentLimit
    props:
      currentLimit.normalValue: {}
      currentLimit.value: {}
    type: cim:CurrentLimit
  CurrentTransformer:
    descr: Instrument transformer used to measure electrical qualities of the circuit that is being protected and/or monitored. Typically used as current transducer for the purpose of metering or protection. A typical secondary current rating would be 5A
    inherits: SensorInterface
    label: CurrentTransformer
    type: cim:CurrentTransformer
  Curve:
    descr: A multi-purpose curve or functional relationship between an independent variable (X-axis) and dependent (Y-axis) variables
    inherits: CurveInterface
    label: Curve
    type: cim:Curve
  CurveData:
    descr: Multi-purpose data points for defining a curve.  The use of this generic class is discouraged if a more specific class can be used to specify the X and Y axis values along with their specific data types
    label: CurveData
    props:
      curveData.Curve: {}
    type: cim:CurveData
  CurveInterface:
    descr: Abstract superclass of Curve
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      curve.CurveDatas: {}
  CurveStyle:
    descr: Style or shape of curve
    label: CurveStyle
    type: cim:CurveStyle
  DCConverterOperatingModeKind:
    descr: The operating mode of an HVDC bipole
    label: DCConverterOperatingModeKind
    type: cim:DCConverterOperatingModeKind
  DCPolarityKind:
    descr: Polarity for DC circuits
    label: DCPolarityKind
    type: cim:DCPolarityKind
  Diagram:
    descr: 'The diagram being exchanged. The coordinate system is a standard Cartesian coordinate system and the orientation attribute defines the orientation. The initial view related attributes can be used to specify an initial view with the x,y coordinates of the diagonal points'
    inherits: IdentifiedObjectInterface
    label: Diagram
    props:
      diagram.DiagramElements: {}
      diagram.orientation: {}
    type: cim:Diagram
  DiagramObject:
    descr: 'An object that defines one or more points in a given space. This object can be associated with anything that specializes IdentifiedObject. For single line diagrams such objects typically include such items as analog values, breakers, disconnectors, power transformers, and transmission lines'
    inherits: DiagramObjectInterface
    label: DiagramObject
    type: cim:DiagramObject
  DiagramObjectInterface:
    descr: Abstract superclass of DiagramObject
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      diagramObject.Diagram: {}
      diagramObject.DiagramObjectPoints: {}
      diagramObject.DiagramObjectStyle: {}
      diagramObject.IdentifiedObject: {}
      diagramObject.rotation: {}
  DiagramObjectPoint:
    descr: A point in a given space defined by 3 coordinates and associated to a diagram object.  The coordinates may be positive or negative as the origin does not have to be in the corner of a diagram
    label: DiagramObjectPoint
    props:
      diagramObjectPoint.DiagramObject: {}
      diagramObjectPoint.sequenceNumber: {}
      diagramObjectPoint.xPosition: {}
      diagramObjectPoint.yPosition: {}
    type: cim:DiagramObjectPoint
  DiagramObjectStyle:
    descr: 'A reference to a style used by the originating system for a diagram object.  A diagram object style describes information such as line thickness, shape such as circle or rectangle etc, and colour'
    inherits: IdentifiedObjectInterface
    label: DiagramObjectStyle
    props:
      diagramObjectStyle.StyledObjects: {}
    type: cim:DiagramObjectStyle
  Disconnector:
    descr: 'A manually operated or motor operated mechanical switching device used for changing the connections in a circuit, or for isolating a circuit or equipment from a source of power. It is required to open or close circuits when negligible current is broken or made'
    inherits: SwitchInterface
    label: Disconnector
    type: cim:Disconnector
  Discrete:
    descr: 'Discrete represents a discrete Measurement, i.e. a Measurement representing discrete values, e.g. a Breaker position'
    inherits: MeasurementInterface
    label: Discrete
    props:
      discrete.DiscreteValues: {}
    type: cim:Discrete
  DiscreteValue:
    descr: DiscreteValue represents a discrete MeasurementValue
    inherits: MeasurementValueInterface
    label: DiscreteValue
    props:
      discreteValue.Discrete: {}
    type: cim:DiscreteValue
  DroopSignalFeedbackKind:
    descr: Governor droop signal feedback source
    label: DroopSignalFeedbackKind
    type: cim:DroopSignalFeedbackKind
  EarthFaultCompensator:
    descr: 'A conducting equipment used to represent a connection to ground which is typically used to compensate earth faults.   An earth fault compensator device modelled with a single terminal implies a second terminal solidly connected to ground.  If two terminals are modelled, the ground is not assumed and normal connection rules apply'
    inherits: EarthFaultCompensatorInterface
    label: EarthFaultCompensator
    type: cim:EarthFaultCompensator
  EarthFaultCompensatorInterface:
    descr: Abstract superclass of EarthFaultCompensator
    inherits: ConductingEquipmentInterface
    kind: abstract
  EnergyArea:
    descr: Describes an area having energy production or consumption.  Specializations are intended to support the load allocation function as typically required in energy management systems or planning studies to allocate hypothesized load levels to individual load points for power flow analysis.  Often the energy area can be linked to both measured and forecast load levels
    inherits: EnergyAreaInterface
    label: EnergyArea
    type: cim:EnergyArea
  EnergyAreaInterface:
    descr: Abstract superclass of EnergyArea
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      energyArea.ControlArea: {}
  EnergyConnection:
    descr: A connection of energy generation or consumption on the power system model
    inherits: EnergyConnectionInterface
    label: EnergyConnection
    type: cim:EnergyConnection
  EnergyConnectionInterface:
    descr: Abstract superclass of EnergyConnection
    inherits: ConductingEquipmentInterface
    kind: abstract
  EnergyConsumer:
    descr: |-
      Generic user of energy - a  point of consumption on the power system model.
      EnergyConsumer.pfixed, .qfixed, .pfixedPct and .qfixedPct have meaning only if there is no LoadResponseCharacteristic associated with EnergyConsumer or if LoadResponseCharacteristic.exponentModel is set to False
    inherits: EnergyConsumerInterface
    label: EnergyConsumer
    type: cim:EnergyConsumer
  EnergyConsumerInterface:
    descr: Abstract superclass of EnergyConsumer
    inherits: EnergyConnectionInterface
    kind: abstract
    props:
      energyConsumer.LoadResponse: {}
      energyConsumer.p: {}
      energyConsumer.pfixed: {}
      energyConsumer.pfixedPct: {}
      energyConsumer.q: {}
      energyConsumer.qfixed: {}
      energyConsumer.qfixedPct: {}
      nc:energyConsumer.LoadAction: {}
  Equipment:
    descr: 'The parts of a power system that are physical devices, electronic or mechanical'
    inherits: EquipmentInterface
    label: Equipment
    type: cim:Equipment
  EquipmentContainer:
    descr: A modelling construct to provide a root class for containing equipment
    inherits: EquipmentContainerInterface
    label: EquipmentContainer
    type: cim:EquipmentContainer
  EquipmentContainerInterface:
    descr: Abstract superclass of EquipmentContainer
    inherits: ConnectivityNodeContainerInterface
    kind: abstract
    props:
      equipmentContainer.Equipments: {}
  EquipmentInterface:
    descr: Abstract superclass of Equipment
    inherits: cimr:EquipmentOrContainerInterface
    kind: abstract
    props:
      cimr:connectedTo: {}
      cimr:equipment.Terminals: {}
      equipment.ContingencyEquipment: {}
      equipment.EquipmentContainer: {}
      equipment.aggregate: {}
      equipment.inService: {}
      equipment.networkAnalysisEnabled: {}
      equipment.normallyInService: {}
      nc:equipment.InServiceAction: {}
      nc:equipment.PinEquipment: {}
      nc:equipment.PinEquipmentTripping: {}
  EquivalentEquipment:
    descr: The class represents equivalent objects that are the result of a network reduction. The class is the base for equivalent objects of different types
    inherits: EquivalentEquipmentInterface
    label: EquivalentEquipment
    type: cim:EquivalentEquipment
  EquivalentEquipmentInterface:
    descr: Abstract superclass of EquivalentEquipment
    inherits: ConductingEquipmentInterface
    kind: abstract
  EquivalentInjection:
    descr: This class represents equivalent injections (generation or load).  Voltage regulation is allowed only at the point of connection
    inherits: EquivalentEquipmentInterface
    label: EquivalentInjection
    props:
      equivalentInjection.maxP: {}
      equivalentInjection.maxQ: {}
      equivalentInjection.minP: {}
      equivalentInjection.minQ: {}
      equivalentInjection.p: {}
      equivalentInjection.q: {}
      equivalentInjection.r: {}
      equivalentInjection.r0: {}
      equivalentInjection.regulationCapability: {}
      equivalentInjection.x: {}
      equivalentInjection.x0: {}
    type: cim:EquivalentInjection
  ExcIEEEST1AUELselectorKind:
    descr: Types of connections for the UEL input used in ExcIEEEST1A
    label: ExcIEEEST1AUELselectorKind
    type: cim:ExcIEEEST1AUELselectorKind
  ExcREXSFeedbackSignalKind:
    descr: Types of rate feedback signals
    label: ExcREXSFeedbackSignalKind
    type: cim:ExcREXSFeedbackSignalKind
  ExcST6BOELselectorKind:
    descr: Types of connections for the OEL input used for static excitation systems type 6B
    label: ExcST6BOELselectorKind
    type: cim:ExcST6BOELselectorKind
  ExcST7BOELselectorKind:
    descr: Types of connections for the OEL input used for static excitation systems type 7B
    label: ExcST7BOELselectorKind
    type: cim:ExcST7BOELselectorKind
  ExcST7BUELselectorKind:
    descr: Types of connections for the UEL input used for static excitation systems type 7B
    label: ExcST7BUELselectorKind
    type: cim:ExcST7BUELselectorKind
  Feeder:
    descr: |-
      A collection of equipment for organizational purposes, used for grouping distribution resources.
      The organization a feeder does not necessarily reflect connectivity or current operation state
    inherits: EquipmentContainerInterface
    label: Feeder
    type: cim:Feeder
  FrancisGovernorControlKind:
    descr: Governor control flag for Francis hydro model
    label: FrancisGovernorControlKind
    type: cim:FrancisGovernorControlKind
  FuelType:
    descr: Type of fuel
    label: FuelType
    type: cim:FuelType
  Fuse:
    descr: An overcurrent protective device with a circuit opening fusible part that is heated and severed by the passage of overcurrent through it. A fuse is considered a switching device because it breaks current
    inherits: SwitchInterface
    label: Fuse
    type: cim:Fuse
  GeneratingUnit:
    descr: 'A single or set of synchronous machines for converting mechanical power into alternating-current power. For example, individual machines within a set may be defined for scheduling purposes while a single control signal is derived for the set. In this case there would be a GeneratingUnit for each member of the set and an additional GeneratingUnit corresponding to the set'
    inherits: EquipmentInterface
    label: GeneratingUnit
    props:
      generatingUnit.ControlAreaGeneratingUnit: {}
      generatingUnit.RotatingMachine: {}
      generatingUnit.maxEconomicP: {}
      generatingUnit.maxOperatingP: {}
      generatingUnit.minEconomicP: {}
      generatingUnit.minOperatingP: {}
      generatingUnit.nominalP: {}
      generatingUnit.normalPF: {}
      generatingUnit.ratedGrossMaxP: {}
      generatingUnit.ratedNetMaxP: {}
      nc:generatingUnit.ScheduleResource: {}
    type: cim:GeneratingUnit
  GeneratorControlSource:
    descr: The source of controls for a generating unit
    label: GeneratorControlSource
    type: cim:GeneratorControlSource
  GenericNonLinearLoadModelKind:
    descr: Type of generic non-linear load model
    label: GenericNonLinearLoadModelKind
    type: cim:GenericNonLinearLoadModelKind
  GeographicalRegion:
    descr: A geographical region of a power system network model
    inherits: IdentifiedObjectInterface
    label: GeographicalRegion
    props:
      geographicalRegion.Regions: {}
    type: cim:GeographicalRegion
  GovHydro4ModelKind:
    descr: Possible types of GovHydro4 models
    label: GovHydro4ModelKind
    type: cim:GovHydro4ModelKind
  HydroEnergyConversionKind:
    descr: Specifies the capability of the hydro generating unit to convert energy as a generator or pump
    label: HydroEnergyConversionKind
    type: cim:HydroEnergyConversionKind
  HydroPlantStorageKind:
    descr: The type of hydro power plant
    label: HydroPlantStorageKind
    type: cim:HydroPlantStorageKind
  HydroTurbineKind:
    descr: Type of turbine
    label: HydroTurbineKind
    type: cim:HydroTurbineKind
  IOPoint:
    descr: The class describe a measurement or control value. The purpose is to enable having attributes and associations common for measurement and control
    inherits: IOPointInterface
    label: IOPoint
    type: cim:IOPoint
  IOPointInterface:
    descr: Abstract superclass of IOPoint
    inherits: IdentifiedObjectInterface
    kind: abstract
  IdentifiedObject:
    descr: This is a root class to provide common identification for all classes needing identification and naming attributes
    inherits: IdentifiedObjectInterface
    label: IdentifiedObject
    type: cim:IdentifiedObject
  IdentifiedObjectInterface:
    descr: Abstract superclass of IdentifiedObject
    kind: abstract
    name: identifiedObject.name
    props:
      cimr:mridSignificantPart: {}
      eu:identifiedObject.energyIdentCodeEic: {}
      identifiedObject.DiagramObjects: {}
      identifiedObject.aliasName: {}
      identifiedObject.description: {}
      identifiedObject.mRID: {}
      identifiedObject.name:
        min: 1
  IfdBaseKind:
    descr: Excitation base system mode
    label: IfdBaseKind
    type: cim:IfdBaseKind
  InputSignalKind:
    descr: 'Types of input signals.  In dynamics modelling, commonly represented by the <i>j</i> parameter'
    label: InputSignalKind
    type: cim:InputSignalKind
  Line:
    descr: Contains equipment beyond a substation belonging to a power transmission line
    inherits: EquipmentContainerInterface
    label: Line
    props:
      line.Region: {}
    type: cim:Line
  LinearShuntCompensator:
    descr: A linear shunt compensator has banks or sections with equal admittance values
    inherits: ShuntCompensatorInterface
    label: LinearShuntCompensator
    props:
      linearShuntCompensator.bPerSection: {}
      linearShuntCompensator.gPerSection: {}
    type: cim:LinearShuntCompensator
  LoadArea:
    descr: The class is the root or first level in a hierarchical structure for grouping of loads for the purpose of load flow load scaling
    inherits: EnergyAreaInterface
    label: LoadArea
    props:
      loadArea.SubLoadAreas: {}
    type: cim:LoadArea
  LoadBreakSwitch:
    descr: 'A mechanical switching device capable of making, carrying, and breaking currents under normal operating conditions'
    inherits: ProtectedSwitchInterface
    label: LoadBreakSwitch
    type: cim:LoadBreakSwitch
  LoadGroup:
    descr: The class is the third level in a hierarchical structure for grouping of loads for the purpose of load flow load scaling
    inherits: LoadGroupInterface
    label: LoadGroup
    type: cim:LoadGroup
  LoadGroupInterface:
    descr: Abstract superclass of LoadGroup
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      loadGroup.SubLoadArea: {}
  LoadResponseCharacteristic:
    descr: 'Models the characteristic response of the load demand due to changes in system conditions such as voltage and frequency. It is not related to demand response. If LoadResponseCharacteristic.exponentModel is True, the exponential voltage or frequency dependent models are specified and used as to calculate active and reactive power components of the load model. The equations to calculate active and reactive power components of the load model are internal to the power flow calculation, hence they use'
    inherits: IdentifiedObjectInterface
    label: LoadResponseCharacteristic
    props:
      loadResponseCharacteristic.EnergyConsumer: {}
      loadResponseCharacteristic.exponentModel: {}
      loadResponseCharacteristic.pConstantCurrent: {}
      loadResponseCharacteristic.pConstantImpedance: {}
      loadResponseCharacteristic.pConstantPower: {}
      loadResponseCharacteristic.qConstantCurrent: {}
      loadResponseCharacteristic.qConstantImpedance: {}
      loadResponseCharacteristic.qConstantPower: {}
    type: cim:LoadResponseCharacteristic
  Location:
    descr: 'The place, scene, or point of something where someone or something has been, is, and/or will be at a given moment in time. It can be defined with one or more position points (coordinates) in a given coordinate system'
    inherits: IdentifiedObjectInterface
    label: Location
    props:
      location.CoordinateSystem: {}
      location.PowerSystemResources: {}
    type: cim:Location
  Measurement:
    descr: 'A Measurement represents any measured, calculated or non-measured non-calculated quantity. Any piece of equipment may contain Measurements, e.g. a substation may have temperature measurements and door open indications, a transformer may have oil temperature and tank pressure measurements, a bay may contain a number of power flow measurements and a Breaker may contain a switch status measurement.  The PSR - Measurement association is intended to capture this use of Measurement and is included in the'
    inherits: MeasurementInterface
    label: Measurement
    type: cim:Measurement
  MeasurementInterface:
    descr: Abstract superclass of Measurement
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      measurement.PowerSystemResource: {}
      measurement.measurementType: {}
      measurement.phases: {}
      measurement.unitMultiplier: {}
      measurement.unitSymbol: {}
  MeasurementValue:
    descr: 'The current state for a measurement. A state value is an instance of a measurement from a specific source. Measurements can be associated with many state values, each representing a different source for the measurement'
    inherits: MeasurementValueInterface
    label: MeasurementValue
    type: cim:MeasurementValue
  MeasurementValueInterface:
    descr: Abstract superclass of MeasurementValue
    inherits: IOPointInterface
    kind: abstract
    props:
      measurementValue.MeasurementValueSource: {}
      measurementValue.sensorAccuracy: {}
      measurementValue.timeStamp: {}
  MeasurementValueSource:
    descr: MeasurementValueSource describes the alternative sources updating a MeasurementValue. User conventions for how to use the MeasurementValueSource attributes are defined in IEC 61970-301
    inherits: IdentifiedObjectInterface
    label: MeasurementValueSource
    props:
      measurementValueSource.MeasurementValues: {}
    type: cim:MeasurementValueSource
  Name:
    descr: The Name class provides the means to define any number of human readable  names for an object. A name is <b>not</b> to be used for defining inter-object relationships. For inter-object relationships instead use the object identification 'mRID'
    label: Name
    props:
      name.name: {}
    type: cim:Name
  NameType:
    descr: "Type of name. Possible values for attribute 'name' are implementation dependent but standard profiles may specify types. An enterprise may have multiple IT systems each having its own local name for the same object, e.g. a planning system may have different names from an EMS. An object may also have different names within the same IT system, e.g. localName as defined in CIM version 14. The definition from CIM14 is: The localName is a human readable name of the object. It is a free text name local"
    label: NameType
    props:
      nameType.description: {}
      nameType.name: {}
    type: cim:NameType
  NonConformLoad:
    descr: NonConformLoad represents loads that do not follow a daily load change pattern and whose changes are not correlated with the daily load change pattern
    inherits: EnergyConsumerInterface
    label: NonConformLoad
    props:
      nonConformLoad.LoadGroup: {}
    type: cim:NonConformLoad
  NonConformLoadGroup:
    descr: Loads that do not follow a daily and seasonal load variation pattern
    inherits: LoadGroupInterface
    label: NonConformLoadGroup
    props:
      nonConformLoadGroup.EnergyConsumers: {}
    type: cim:NonConformLoadGroup
  OperationalLimit:
    descr: 'A value and normal value associated with a specific kind of limit.  The sub class value and normalValue attributes vary inversely to the associated OperationalLimitType.acceptableDuration (acceptableDuration for short).   If a particular piece of equipment has multiple operational limits of the same kind (apparent power, current, etc.), the limit with the greatest acceptableDuration shall have the smallest limit value and the limit with the smallest acceptableDuration shall have the largest limit'
    inherits: OperationalLimitInterface
    label: OperationalLimit
    type: cim:OperationalLimit
  OperationalLimitDirectionKind:
    descr: The direction attribute describes the side of  a limit that is a violation
    label: OperationalLimitDirectionKind
    type: cim:OperationalLimitDirectionKind
  OperationalLimitInterface:
    descr: Abstract superclass of OperationalLimit
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      nc:operationalLimit.PinOperationallLimit: {}
      operationalLimit.OperationalLimitSet: {}
      operationalLimit.OperationalLimitType: {}
  OperationalLimitSet:
    descr: 'A set of limits associated with equipment.  Sets of limits might apply to a specific temperature, or season for example. A set of limits may contain different severities of limit levels that would apply to the same equipment. The set may contain limits of different types such as apparent power and current limits or high and low voltage limits  that are logically applied together as a set'
    inherits: IdentifiedObjectInterface
    label: OperationalLimitSet
    props:
      nc:operationalLimitSet.PowerTransferCorridor: {}
      operationalLimitSet.OperationalLimitValue: {}
      operationalLimitSet.Terminal: {}
    type: cim:OperationalLimitSet
  OperationalLimitType:
    descr: The operational meaning of a category of limits
    inherits: IdentifiedObjectInterface
    label: OperationalLimitType
    props:
      eu:operationalLimitType.kind: {}
      operationalLimitType.OperationalLimit: {}
      operationalLimitType.acceptableDuration: {}
      operationalLimitType.direction: {}
      operationalLimitType.isInfiniteDuration: {}
    type: cim:OperationalLimitType
  Organisation:
    descr: 'Organisation that might have roles as utility, contractor, supplier, manufacturer, customer, etc'
    inherits: IdentifiedObjectInterface
    label: Organisation
    props:
      organisation.Roles: {}
    type: cim:Organisation
  OrganisationRole:
    descr: 'Identifies a way in which an organisation may participate in the utility enterprise (e.g., customer, manufacturer, etc)'
    inherits: OrganisationRoleInterface
    label: OrganisationRole
    type: cim:OrganisationRole
  OrganisationRoleInterface:
    descr: Abstract superclass of OrganisationRole
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      organisationRole.Organisation: {}
  OrientationKind:
    descr: 'The orientation of the coordinate system with respect to top, left, and the coordinate number system'
    label: OrientationKind
    type: cim:OrientationKind
  PetersenCoil:
    descr: A variable impedance device normally used to offset line charging during single line faults in an ungrounded section of network
    inherits: EarthFaultCompensatorInterface
    label: PetersenCoil
    type: cim:PetersenCoil
  PetersenCoilModeKind:
    descr: The mode of operation for a Petersen coil
    label: PetersenCoilModeKind
    type: cim:PetersenCoilModeKind
  PhaseCode:
    descr: 'An unordered enumeration of phase identifiers.  Allows designation of phases for both transmission and distribution equipment, circuits and loads.   The enumeration, by itself, does not describe how the phases are connected together or connected to ground.  Ground is not explicitly denoted as a phase. Residential and small commercial loads are often served from single-phase, or split-phase, secondary circuits. For the example of s12N, phases 1 and 2 refer to hot wires that are 180 degrees out of'
    label: PhaseCode
    type: cim:PhaseCode
  PhaseConnectedFaultKind:
    descr: The type of fault connection among phases
    label: PhaseConnectedFaultKind
    type: cim:PhaseConnectedFaultKind
  PotentialTransformer:
    descr: 'Instrument transformer (also known as Voltage Transformer) used to measure electrical qualities of the circuit that is being protected and/or monitored. Typically used as voltage transducer for the purpose of metering, protection, or sometimes auxiliary substation supply. A typical secondary voltage rating would be 120V'
    inherits: SensorInterface
    label: PotentialTransformer
    type: cim:PotentialTransformer
  PowerSystemResource:
    descr: 'A power system resource (PSR) can be an item of equipment such as a switch, an equipment container containing many individual items of equipment such as a substation, or an organisational entity such as sub-control area. Power system resources can have measurements associated'
    inherits: PowerSystemResourceInterface
    label: PowerSystemResource
    type: cim:PowerSystemResource
  PowerSystemResourceInterface:
    descr: Abstract superclass of PowerSystemResource
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      powerSystemResource.Location: {}
      powerSystemResource.Measurements: {}
  PowerTransformer:
    descr: 'An electrical device consisting of  two or more coupled windings, with or without a magnetic core, for introducing mutual coupling between electric circuits. Transformers can be used to control voltage and phase shift (active power flow). A power transformer may be composed of separate transformer tanks that need not be identical. A power transformer can be modelled with or without tanks and is intended for use in both balanced and unbalanced representations.   A power transformer typically has two'
    inherits: ConductingEquipmentInterface
    label: PowerTransformer
    props:
      powerTransformer.PowerTransformerEnd: {}
      powerTransformer.isPartOfGeneratorUnit: {}
    type: cim:PowerTransformer
  PowerTransformerEnd:
    descr: 'A PowerTransformerEnd is associated with each Terminal of a PowerTransformer. The impedance values r, r0, x, and x0 of a PowerTransformerEnd represents a star equivalent as follows. 1) for a two Terminal PowerTransformer the high voltage (TransformerEnd.endNumber=1) PowerTransformerEnd has non zero values on r, r0, x, and x0 while the low voltage (TransformerEnd.endNumber=2) PowerTransformerEnd has zero values for r, r0, x, and x0.  Parameters are always provided, even if the PowerTransformerEnds'
    inherits: TransformerEndInterface
    label: PowerTransformerEnd
    props:
      powerTransformerEnd.PowerTransformer: {}
      powerTransformerEnd.b: {}
      powerTransformerEnd.connectionKind: {}
      powerTransformerEnd.g: {}
      powerTransformerEnd.r: {}
      powerTransformerEnd.ratedS: {}
      powerTransformerEnd.ratedU: {}
      powerTransformerEnd.x: {}
    type: cim:PowerTransformerEnd
  ProtectedSwitch:
    descr: A ProtectedSwitch is a switching device that can be operated by ProtectionEquipment
    inherits: ProtectedSwitchInterface
    label: ProtectedSwitch
    type: cim:ProtectedSwitch
  ProtectedSwitchInterface:
    descr: Abstract superclass of ProtectedSwitch
    inherits: SwitchInterface
    kind: abstract
  RatioTapChanger:
    descr: |-
      A tap changer that changes the voltage ratio impacting the voltage magnitude but not the phase angle across the transformer.
      
      Angle sign convention (general): Positive value indicates a positive phase shift from the winding where the tap is located to the other winding (for a two-winding transformer)
    inherits: TapChangerInterface
    label: RatioTapChanger
    props:
      ratioTapChanger.TransformerEnd: {}
      ratioTapChanger.stepVoltageIncrement: {}
    type: cim:RatioTapChanger
  RegulatingCondEq:
    descr: A type of conducting equipment that can regulate a quantity (i.e. voltage or flow) at a specific point in the network
    inherits: RegulatingCondEqInterface
    label: RegulatingCondEq
    type: cim:RegulatingCondEq
  RegulatingCondEqInterface:
    descr: Abstract superclass of RegulatingCondEq
    inherits: EnergyConnectionInterface
    kind: abstract
    props:
      regulatingCondEq.RegulatingControl: {}
      regulatingCondEq.controlEnabled: {}
  RegulatingControl:
    descr: 'Specifies a set of equipment that works together to control a power system quantity such as voltage or flow.  Remote bus voltage control is possible by specifying the controlled terminal located at some place remote from the controlling equipment. The specified terminal shall be associated with the connectivity node of the controlled point.  The most specific subtype of RegulatingControl shall be used in case such equipment participate in the control, e.g. TapChangerControl for tap changers. For'
    inherits: RegulatingControlInterface
    label: RegulatingControl
    type: cim:RegulatingControl
  RegulatingControlInterface:
    descr: Abstract superclass of RegulatingControl
    inherits: PowerSystemResourceInterface
    kind: abstract
    props:
      regulatingControl.RegulatingCondEq: {}
      regulatingControl.Terminal: {}
      regulatingControl.discrete: {}
      regulatingControl.enabled: {}
      regulatingControl.mode: {}
      regulatingControl.targetDeadband: {}
      regulatingControl.targetValue: {}
      regulatingControl.targetValueUnitMultiplier: {}
  RegulatingControlModeKind:
    descr: 'The kind of regulation model.   For example regulating voltage, reactive power, active power, etc'
    label: RegulatingControlModeKind
    type: cim:RegulatingControlModeKind
  RemoteSignalKind:
    descr: Type of input signal coming from remote bus
    label: RemoteSignalKind
    type: cim:RemoteSignalKind
  RotatingMachine:
    descr: A rotating machine which may be used as a generator or motor
    inherits: RotatingMachineInterface
    label: RotatingMachine
    type: cim:RotatingMachine
  RotatingMachineInterface:
    descr: Abstract superclass of RotatingMachine
    inherits: RegulatingCondEqInterface
    kind: abstract
    props:
      nc:rotatingMachine.RotatingMachineAction: {}
      rotatingMachine.GeneratingUnit: {}
      rotatingMachine.p: {}
      rotatingMachine.q: {}
      rotatingMachine.ratedS: {}
  RotorKind:
    descr: Type of rotor on physical machine
    label: RotorKind
    type: cim:RotorKind
  SVCControlMode:
    descr: Static VAr Compensator control mode
    label: SVCControlMode
    type: cim:SVCControlMode
  Sensor:
    descr: 'This class describe devices that transform a measured quantity into signals that can be presented at displays, used in control or be recorded'
    inherits: SensorInterface
    label: Sensor
    type: cim:Sensor
  SensorInterface:
    descr: Abstract superclass of Sensor
    inherits: AuxiliaryEquipmentInterface
    kind: abstract
  ShortCircuitRotorKind:
    descr: 'Type of rotor, used by short circuit applications'
    label: ShortCircuitRotorKind
    type: cim:ShortCircuitRotorKind
  ShuntCompensator:
    descr: A shunt capacitor or reactor or switchable bank of shunt capacitors or reactors. A section of a shunt compensator is an individual capacitor or reactor. A negative value for bPerSection indicates that the compensator is a reactor. ShuntCompensator is a single terminal device.  Ground is implied
    inherits: ShuntCompensatorInterface
    label: ShuntCompensator
    type: cim:ShuntCompensator
  ShuntCompensatorInterface:
    descr: Abstract superclass of ShuntCompensator
    inherits: RegulatingCondEqInterface
    kind: abstract
    props:
      shuntCompensator.SvShuntCompensatorSections: {}
      shuntCompensator.aVRDelay: {}
      shuntCompensator.maximumSections: {}
      shuntCompensator.nomU: {}
      shuntCompensator.normalSections: {}
      shuntCompensator.sections: {}
  Source:
    descr: Source gives information related to the origin of a value
    label: Source
    type: cim:Source
  StaticLoadModelKind:
    descr: Type of static load model
    label: StaticLoadModelKind
    type: cim:StaticLoadModelKind
  StationSupply:
    descr: Station supply with load derived from the station output
    inherits: EnergyConsumerInterface
    label: StationSupply
    type: cim:StationSupply
  SubGeographicalRegion:
    descr: A subset of a geographical region of a power system network model
    inherits: IdentifiedObjectInterface
    label: SubGeographicalRegion
    props:
      subGeographicalRegion.Lines: {}
      subGeographicalRegion.Region: {}
      subGeographicalRegion.Substations: {}
    type: cim:SubGeographicalRegion
  SubLoadArea:
    descr: The class is the second level in a hierarchical structure for grouping of loads for the purpose of load flow load scaling
    inherits: EnergyAreaInterface
    label: SubLoadArea
    props:
      subLoadArea.LoadArea: {}
      subLoadArea.LoadGroups: {}
    type: cim:SubLoadArea
  Substation:
    descr: 'A collection of equipment for purposes other than generation or utilization, through which electric energy in bulk is passed for the purposes of switching or modifying its characteristics'
    inherits: EquipmentContainerInterface
    label: Substation
    props:
      substation.Region: {}
      substation.VoltageLevels: {}
    type: cim:Substation
  SvPowerFlow:
    descr: State variable for power flow. Load convention is used for flow direction. This means flow out from the TopologicalNode into the equipment is positive
    label: SvPowerFlow
    props:
      svPowerFlow.Terminal: {}
      svPowerFlow.p: {}
      svPowerFlow.q: {}
    type: cim:SvPowerFlow
  SvShuntCompensatorSections:
    descr: State variable for the number of sections in service for a shunt compensator
    label: SvShuntCompensatorSections
    props:
      svShuntCompensatorSections.ShuntCompensator: {}
      svShuntCompensatorSections.sections: {}
    type: cim:SvShuntCompensatorSections
  SvStatus:
    descr: State variable for status
    label: SvStatus
    props:
      svStatus.ConductingEquipment: {}
      svStatus.inService: {}
    type: cim:SvStatus
  SvSwitch:
    descr: State variable for switch
    label: SvSwitch
    props:
      svSwitch.Switch: {}
      svSwitch.open: {}
    type: cim:SvSwitch
  SvTapStep:
    descr: State variable for transformer tap step
    label: SvTapStep
    props:
      svTapStep.TapChanger: {}
      svTapStep.position: {}
    type: cim:SvTapStep
  SvVoltage:
    descr: State variable for voltage
    label: SvVoltage
    props:
      svVoltage.TopologicalNode: {}
      svVoltage.angle: {}
      svVoltage.v: {}
    type: cim:SvVoltage
  Switch:
    descr: 'A generic device designed to close, or open, or both, one or more electric circuits.  All switches are two terminal devices including grounding switches. The ACDCTerminal.connected at the two sides of the switch shall not be considered for assessing switch connectivity, i.e. only Switch.open, .normalOpen and .locked are relevant'
    inherits: SwitchInterface
    label: Switch
    type: cim:Switch
  SwitchInterface:
    descr: Abstract superclass of Switch
    inherits: ConductingEquipmentInterface
    kind: abstract
    props:
      nc:switch.TopologyAction: {}
      switch.SvSwitch: {}
      switch.locked: {}
      switch.normalOpen: {}
      switch.open: {}
      switch.ratedCurrent: {}
      switch.retained: {}
  SynchronousMachine:
    descr: An electromechanical device that operates with shaft rotating synchronously with the network. It is a single machine operating either as a generator or synchronous condenser or pump
    inherits: RotatingMachineInterface
    label: SynchronousMachine
    props:
      synchronousMachine.maxQ: {}
      synchronousMachine.minQ: {}
      synchronousMachine.operatingMode: {}
      synchronousMachine.qPercent: {}
      synchronousMachine.r: {}
      synchronousMachine.referencePriority: {}
      synchronousMachine.type: {}
    type: cim:SynchronousMachine
  SynchronousMachineKind:
    descr: Synchronous machine type
    label: SynchronousMachineKind
    type: cim:SynchronousMachineKind
  SynchronousMachineModelKind:
    descr: Type of synchronous machine model used in dynamic simulation applications
    label: SynchronousMachineModelKind
    type: cim:SynchronousMachineModelKind
  SynchronousMachineOperatingMode:
    descr: Synchronous machine operating mode
    label: SynchronousMachineOperatingMode
    type: cim:SynchronousMachineOperatingMode
  TapChanger:
    descr: Mechanism for changing transformer winding tap positions
    inherits: TapChangerInterface
    label: TapChanger
    type: cim:TapChanger
  TapChangerControl:
    descr: 'Describes behaviour specific to tap changers, e.g. how the voltage at the end of a line varies with the load level and compensation of the voltage drop by tap adjustment'
    inherits: RegulatingControlInterface
    label: TapChangerControl
    props:
      tapChangerControl.TapChanger: {}
    type: cim:TapChangerControl
  TapChangerInterface:
    descr: Abstract superclass of TapChanger
    inherits: PowerSystemResourceInterface
    kind: abstract
    props:
      tapChanger.SvTapStep: {}
      tapChanger.TapChangerControl: {}
      tapChanger.controlEnabled: {}
      tapChanger.highStep: {}
      tapChanger.lowStep: {}
      tapChanger.ltcFlag: {}
      tapChanger.neutralStep: {}
      tapChanger.neutralU: {}
      tapChanger.normalStep: {}
      tapChanger.step: {}
  Terminal:
    descr: An AC electrical connection point to a piece of conducting equipment. Terminals are connected at physical connection points called connectivity nodes
    inherits: ACDCTerminalInterface
    label: Terminal
    props:
      cimr:terminal.Equipment: {}
      nc:terminal.PinTerminal: {}
      terminal.AuxiliaryEquipment: {}
      terminal.ConductingEquipment: {}
      terminal.ConnectivityNode: {}
      terminal.RegulatingControl: {}
      terminal.SvPowerFlow: {}
      terminal.TopologicalNode: {}
      terminal.TransformerEnd: {}
      terminal.phases: {}
    type: cim:Terminal
  TextDiagramObject:
    descr: A diagram object for placing free-text or text derived from an associated domain object
    inherits: DiagramObjectInterface
    label: TextDiagramObject
    props:
      textDiagramObject.text: {}
    type: cim:TextDiagramObject
  TopologicalIsland:
    descr: |-
      An electrically connected subset of the network. Topological islands can change as the current network state changes, e.g. due to: 
      - disconnect switches or breakers changing state in a SCADA/EMS.
      - manual creation, change or deletion of topological nodes in a planning tool.
      Only energised TopologicalNode-s shall be part of the topological island
    inherits: IdentifiedObjectInterface
    label: TopologicalIsland
    props:
      topologicalIsland.AngleRefTopologicalNode: {}
      topologicalIsland.TopologicalNodes: {}
    type: cim:TopologicalIsland
  TopologicalNode:
    descr: 'For a detailed substation model a topological node is a set of connectivity nodes that, in the current network state, are connected together through any type of closed switches, including  jumpers. Topological nodes change as the current network state changes (i.e., switches, breakers, etc. change state). For a planning model, switch statuses are not used to form topological nodes. Instead they are manually created or deleted in a model builder tool. Topological nodes maintained this way are also'
    inherits: IdentifiedObjectInterface
    label: TopologicalNode
    props:
      topologicalNode.AngleRefTopologicalIsland: {}
      topologicalNode.BaseVoltage: {}
      topologicalNode.ConnectivityNodeContainer: {}
      topologicalNode.ConnectivityNodes: {}
      topologicalNode.SvVoltage: {}
      topologicalNode.Terminal: {}
      topologicalNode.TopologicalIsland: {}
    type: cim:TopologicalNode
  TransformerEnd:
    descr: 'A conducting connection point of a power transformer. It corresponds to a physical transformer winding terminal.  In earlier CIM versions, the TransformerWinding class served a similar purpose, but this class is more flexible because it associates to terminal but is not a specialization of ConductingEquipment'
    inherits: TransformerEndInterface
    label: TransformerEnd
    type: cim:TransformerEnd
  TransformerEndInterface:
    descr: Abstract superclass of TransformerEnd
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      transformerEnd.BaseVoltage: {}
      transformerEnd.RatioTapChanger: {}
      transformerEnd.Terminal: {}
      transformerEnd.endNumber: {}
      transformerEnd.grounded: {}
  UnitMultiplier:
    descr: 'The unit multipliers defined for the CIM.  When applied to unit symbols, the unit symbol is treated as a derived unit. Regardless of the contents of the unit symbol text, the unit symbol shall be treated as if it were a single-character unit symbol. Unit symbols should not contain multipliers, and it should be left to the multiplier to define the multiple for an entire data type.   For example, if a unit symbol is "m2Pers" and the multiplier is "k", then the value is k(m**2/s), and the multiplier'
    label: UnitMultiplier
    type: cim:UnitMultiplier
  UnitSymbol:
    descr: 'The derived units defined for usage in the CIM. In some cases, the derived unit is equal to an SI unit. Whenever possible, the standard derived symbol is used instead of the formula for the derived unit. For example, the unit symbol Farad is defined as "F" instead of "CPerV". In cases where a standard symbol does not exist for a derived unit, the formula for the unit is used as the unit symbol. For example, density does not have a standard symbol and so it is represented as "kgPerm3". With the exception'
    label: UnitSymbol
    type: cim:UnitSymbol
  Validity:
    descr: Validity for MeasurementValue
    label: Validity
    type: cim:Validity
  VoltageLevel:
    descr: 'A collection of equipment at one common system voltage forming a switchgear. The equipment typically consists of breakers, busbars, instrumentation, control, regulation and protection devices as well as assemblies of all these'
    inherits: EquipmentContainerInterface
    label: VoltageLevel
    props:
      voltageLevel.BaseVoltage: {}
      voltageLevel.Bays: {}
      voltageLevel.Substation: {}
    type: cim:VoltageLevel
  VoltageLimit:
    descr: |-
      Operational limit applied to voltage.
      The use of operational VoltageLimit is preferred instead of limits defined at VoltageLevel. The operational VoltageLimits are used, if present
    inherits: OperationalLimitInterface
    label: VoltageLimit
    props:
      voltageLimit.normalValue: {}
      voltageLimit.value: {}
    type: cim:VoltageLimit
  VsPpccControlKind:
    descr: Types applicable to the control of real power and/or DC voltage by voltage source converter
    label: VsPpccControlKind
    type: cim:VsPpccControlKind
  VsQpccControlKind:
    descr: Kind of reactive power control at point of common coupling for a voltage source converter
    label: VsQpccControlKind
    type: cim:VsQpccControlKind
  WindGenUnitKind:
    descr: Kind of wind generating unit
    label: WindGenUnitKind
    type: cim:WindGenUnitKind
  WindLookupTableFunctionKind:
    descr: Function of the lookup table
    label: WindLookupTableFunctionKind
    type: cim:WindLookupTableFunctionKind
  WindPlantQcontrolModeKind:
    descr: Reactive power/voltage controller mode
    label: WindPlantQcontrolModeKind
    type: cim:WindPlantQcontrolModeKind
  WindQcontrolModeKind:
    descr: 'General wind turbine Q control modes <i>M</i><i><sub>qG</sub></i><i>.</i>'
    label: WindQcontrolModeKind
    type: cim:WindQcontrolModeKind
  WindUVRTQcontrolModeKind:
    descr: 'UVRT Q control modes <i>M</i><i><sub>qUVRT</sub></i><i>.</i>'
    label: WindUVRTQcontrolModeKind
    type: cim:WindUVRTQcontrolModeKind
  WindingConnection:
    descr: Winding connection type
    label: WindingConnection
    type: cim:WindingConnection
  cimr:EquipmentOrContainer:
    descr: Union (superclass) of Equipment and ConnectivityNodeContainer
    inherits: cimr:EquipmentOrContainerInterface
    label: Equipment or Container
    type: cimr:EquipmentOrContainer
  cimr:EquipmentOrContainerInterface:
    descr: Abstract superclass of cimr:EquipmentOrContainer
    inherits: PowerSystemResourceInterface
    kind: abstract
    props:
      cimr:connectedThroughPart: {}
      cimr:hasPart: {}
      cimr:hasPartTransitive: {}
      cimr:isPart: {}
      cimr:isPartTransitive: {}
  dcat:Dataset:
    descr: 'A collection of data, published or curated by a single source, and available for access or download in one or more representations'
    label: Dataset
    props:
      adms:versionNotes: {}
      dcat:endDate: {}
      dcat:hasVersion: {}
      dcat:isVersionOf: {}
      dcat:keyword: {}
      dcat:startDate: {}
      dcat:temporalResolution: {}
      dcat:version: {}
      dct:accessRights: {}
      dct:conformsTo: {}
      dct:description: {}
      dct:identifier: {}
      dct:issued: {}
      dct:license: {}
      dct:references: {}
      dct:resource1: {}
      dct:resource10: {}
      dct:resource13: {}
      dct:resource2: {}
      dct:resource3: {}
      dct:resource4: {}
      dct:rights: {}
      dct:rightsHolder: {}
      dct:spatial: {}
      dct:title: {}
      dct:type: {}
      prov:entity: {}
      prov:generatedAtTime: {}
      prov:wasGeneratedBy: {}
    type: dcat:Dataset
  eu:BoundaryPoint:
    descr: 'Designates a connection point at which one or more model authority sets shall connect to. The location of the connection point as well as other properties are agreed between organisations responsible for the interconnection, hence all attributes of the class represent this agreement.  It is primarily used in a boundary model authority set which can contain one or many BoundaryPoint-s among other Equipment-s and their connections'
    inherits: PowerSystemResourceInterface
    label: BoundaryPoint
    props:
      eu:boundaryPoint.ConnectivityNode: {}
      eu:boundaryPoint.fromEndIsoCode: {}
      eu:boundaryPoint.fromEndName: {}
      eu:boundaryPoint.fromEndNameTso: {}
      eu:boundaryPoint.toEndIsoCode: {}
      eu:boundaryPoint.toEndName: {}
      eu:boundaryPoint.toEndNameTso: {}
    type: eu:BoundaryPoint
  eu:LimitKind:
    descr: Limit kinds
    label: LimitKind
    type: eu:LimitKind
  nc:AmbientTemperatureDependencyCurve:
    descr: A curve or functional relationship between the ambient temperature independent variable (X-axis) and relative temperature dependent (Y-axis) variables
    inherits: nc:LimitDependencyCurveInterface
    label: AmbientTemperatureDependencyCurve
    type: nc:AmbientTemperatureDependencyCurve
  nc:AutoReclosingKind:
    descr: |-
      The type of autoreclosing that occurred with the trip.
      
      If high-speed automatic reclosing is successful at one end of a line, but the line needs to be reclosed manually at the other end, choose manual reclosing.
      
      In this document, high-speed automatic reclosing refers to automatic reclosing after less than 2 seconds
    label: AutoReclosingKind
    type: nc:AutoReclosingKind
  nc:AvailabilityFunctionKind:
    descr: Kind of availability that is affecting the function
    label: AvailabilityFunctionKind
    type: nc:AvailabilityFunctionKind
  nc:AvailabilityScheduleCauseKind:
    descr: The kinds of cause of the (un)availability schedule
    label: AvailabilityScheduleCauseKind
    type: nc:AvailabilityScheduleCauseKind
  nc:BaseTimeSeries:
    descr: Time series of values at points in time
    inherits: IdentifiedObjectInterface
    label: BaseTimeSeries
    props:
      nc:baseTimeSeries.generatedAtTime: {}
      nc:baseTimeSeries.interpolationKind: {}
      nc:baseTimeSeries.kind: {}
      nc:baseTimeSeries.percentile: {}
    type: nc:BaseTimeSeries
  nc:BaseTimeSeriesKind:
    descr: Kind of time series
    label: BaseTimeSeriesKind
    type: nc:BaseTimeSeriesKind
  nc:BidDirectionKind:
    descr: Kind of direction of the bid
    label: BidDirectionKind
    type: nc:BidDirectionKind
  nc:BiddingZone:
    descr: A bidding zone is a market-based method for handling power transmission congestion. It consists of scheduling areas that include the relevant production (supply) and consumption (demand) to form an electrical area with the same market price without capacity allocation
    inherits: PowerSystemResourceInterface
    label: BiddingZone
    props:
      nc:biddingZone.BiddingZoneBorderOne: {}
      nc:biddingZone.BiddingZoneBorderTwo: {}
      nc:biddingZone.SchedulingArea: {}
      nc:biddingZone.isTradeEnabled: {}
    type: nc:BiddingZone
  nc:BiddingZoneBorder:
    descr: Defines the aggregated connection capacity between two Bidding Zones
    inherits: PowerSystemResourceInterface
    label: BiddingZoneBorder
    props:
      nc:biddingZoneBorder.BiddingZoneOne: {}
      nc:biddingZoneBorder.BiddingZoneTwo: {}
    type: nc:BiddingZoneBorder
  nc:CalculationKind:
    descr: Kind of calculation operation that can be done to Measurement
    label: CalculationKind
    type: nc:CalculationKind
  nc:CapacityCalculationRegion:
    descr: Capacity calculation region is a coherent part of the interconnected system that is used for calculating the transmission capacity for a bidding zone or between bidding zones
    inherits: nc:RegionInterface
    label: CapacityCalculationRegion
    type: nc:CapacityCalculationRegion
  nc:CertaintyLevelKind:
    descr: High certainty level is used when the cause of a fault is 100 % certain or when the cause is the most probable cause and potentially determined by an expert
    label: CertaintyLevelKind
    type: nc:CertaintyLevelKind
  nc:Circuit:
    descr: 'A circuit is a collection of equipment in a network graph that provide common stability limits. The relevant equipment is in general given by the identifying terminal. A software application that can do topology processing shall calculate the equipment belonging to the circuit, if there are no stability limits associated to it. In case of stability limits, the containment reflects the equipments that were used in the calculation/analysis'
    inherits: nc:CircuitInterface
    label: Circuit
    type: nc:Circuit
  nc:CircuitInterface:
    descr: Abstract superclass of nc:Circuit
    inherits: PowerSystemResourceInterface
    kind: abstract
    props:
      nc:circuit.CircuitShare: {}
      nc:circuit.positiveFlowIn: {}
  nc:CircuitShare:
    descr: Defines the share of the circuit which is part of an associated power transfer corridor
    inherits: IdentifiedObjectInterface
    label: CircuitShare
    props:
      nc:circuitShare.Circuit: {}
      nc:circuitShare.PowerTransferCorridor: {}
      nc:circuitShare.contributionFactor: {}
      nc:circuitShare.normalContributionFactor: {}
    type: nc:CircuitShare
  nc:CompensatorControlModeKind:
    descr: Kind of compensator controller mode
    label: CompensatorControlModeKind
    type: nc:CompensatorControlModeKind
  nc:ContingencyConditionKind:
    descr: Kinds of occurrence criteria of application
    label: ContingencyConditionKind
    type: nc:ContingencyConditionKind
  nc:CoordinatedCapacityCalculator:
    descr: A role that coordinates and executes the task of calculating transmission capacity
    inherits: nc:SystemOperationCoordinatorInterface
    label: CoordinatedCapacityCalculator
    type: nc:CoordinatedCapacityCalculator
  nc:CostSettledKind:
    descr: Kind describing how settled the cost is in regards to changes
    label: CostSettledKind
    type: nc:CostSettledKind
  nc:CriticalElementContingencyKind:
    descr: The kind of critical element contingency
    label: CriticalElementContingencyKind
    type: nc:CriticalElementContingencyKind
  nc:DCControlModeKind:
    descr: Kind of DC control mode
    label: DCControlModeKind
    type: nc:DCControlModeKind
  nc:DCSystemDirectionKind:
    descr: Direction kinds of the DC system
    label: DCSystemDirectionKind
    type: nc:DCSystemDirectionKind
  nc:DCSystemTransmissionKind:
    descr: DC system transmission kind
    label: DCSystemTransmissionKind
    type: nc:DCSystemTransmissionKind
  nc:DayOfWeekKind:
    descr: The kind of day to be included in a regular schedule
    label: DayOfWeekKind
    type: nc:DayOfWeekKind
  nc:DistributionSystemOperator:
    descr: A system operator that is responsible for operating of energy distribution network from transmission level down to low voltage levels including the connection to household
    inherits: nc:SystemOperatorInterface
    label: DistributionSystemOperator
    type: nc:DistributionSystemOperator
  nc:ElementCombinationConstraintKind:
    descr: Kind of constraint for an element combination
    label: ElementCombinationConstraintKind
    type: nc:ElementCombinationConstraintKind
  nc:EnergyDemandKind:
    descr: Kind of energy demand
    label: EnergyDemandKind
    type: nc:EnergyDemandKind
  nc:EnergyKind:
    descr: Categories of energy used for energy groups
    label: EnergyKind
    type: nc:EnergyKind
  nc:FaultCategoryKind:
    descr: Available kinds of fault categories
    label: FaultCategoryKind
    type: nc:FaultCategoryKind
  nc:FaultKind:
    descr: |-
      One fault can consist of several fault types. If a fault consists of several fault types, the most significant fault type is used.
      
      In case of developing faults, that is in faults changing from one type to another, the final type is given
    label: FaultKind
    type: nc:FaultKind
  nc:FunctionInputVariable:
    descr: Functional input variable defines the domain of the function
    inherits: nc:FunctionInputVariableInterface
    label: FunctionInputVariable
    type: nc:FunctionInputVariable
  nc:FunctionInputVariableInterface:
    descr: Abstract superclass of nc:FunctionInputVariable
    inherits: IdentifiedObjectInterface
    kind: abstract
  nc:Gate:
    descr: Logical gate that supports a logical operation based on the input
    inherits: IdentifiedObjectInterface
    label: Gate
    props:
      nc:gate.GateInputPin: {}
      nc:gate.PinGate: {}
      nc:gate.StageTrigger: {}
      nc:gate.kind: {}
    type: nc:Gate
  nc:GateInputPin:
    descr: Input pin for a logical gate. The condition described in the input pin gives a logical true or false. The result from measurement and calculation are converted to a true or false
    inherits: nc:GateInputPinInterface
    label: GateInputPin
    type: nc:GateInputPin
  nc:GateInputPinInterface:
    descr: Abstract superclass of nc:GateInputPin
    inherits: nc:FunctionInputVariableInterface
    kind: abstract
    props:
      nc:gateInputPin.Gate: {}
      nc:gateInputPin.logicKind: {}
      nc:gateInputPin.negate: {}
      nc:gateInputPin.thresholdPercentage: {}
      nc:gateInputPin.thresholdValue: {}
  nc:GateLogicKind:
    descr: Define the different logical operations
    label: GateLogicKind
    type: nc:GateLogicKind
  nc:GeothermalUnitKind:
    descr: Kind of geothermal
    label: GeothermalUnitKind
    type: nc:GeothermalUnitKind
  nc:GridStateAlteration:
    descr: Grid state alteration is a change of values describing state (operating point) of one element in the grid model compared to the base case
    inherits: nc:GridStateAlterationInterface
    label: GridStateAlteration
    type: nc:GridStateAlteration
  nc:GridStateAlterationCollection:
    descr: A collection of grid state alterations
    inherits: IdentifiedObjectInterface
    label: GridStateAlterationCollection
    props:
      nc:gridStateAlterationCollection.GridStateAlteration: {}
      nc:gridStateAlterationCollection.StageAction: {}
    type: nc:GridStateAlterationCollection
  nc:GridStateAlterationInterface:
    descr: Abstract superclass of nc:GridStateAlteration
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      nc:gridStateAlteration.GridStateAlterationCollection: {}
      nc:gridStateAlteration.PropertyReference: {}
      nc:gridStateAlteration.RangeConstraint: {}
      nc:gridStateAlteration.enabled: {}
      nc:gridStateAlteration.normalEnabled: {}
  nc:ImpactAgreementKind:
    descr: The impact agreement for the remedial action
    label: ImpactAgreementKind
    type: nc:ImpactAgreementKind
  nc:InServiceAction:
    descr: In service action represents a change of the status of the equipment in the grid model compared to the base case
    inherits: nc:GridStateAlterationInterface
    label: InServiceAction
    props:
      nc:inServiceAction.Equipment: {}
    type: nc:InServiceAction
  nc:InjectionControlModeKind:
    descr: Kind of injection controller mode
    label: InjectionControlModeKind
    type: nc:InjectionControlModeKind
  nc:LimitDependencyCurve:
    descr: A curve or functional relationship between an independent variable (X-axis) and limiting dependent (Y-axis) variables
    inherits: nc:LimitDependencyCurveInterface
    label: LimitDependencyCurve
    type: nc:LimitDependencyCurve
  nc:LimitDependencyCurveInterface:
    descr: Abstract superclass of nc:LimitDependencyCurve
    inherits: CurveInterface
    kind: abstract
  nc:LineCircuit:
    descr: A line circuit is a circuit that has at least one ACLineSegment and may or may not include related switching and/or auxiliary equipment
    inherits: nc:CircuitInterface
    label: LineCircuit
    type: nc:LineCircuit
  nc:LoadAction:
    descr: Load action
    inherits: nc:SetPointActionInterface
    label: LoadAction
    props:
      nc:loadAction.EnergyConsumer: {}
    type: nc:LoadAction
  nc:LogicalOperatorsKind:
    descr: Kinds of logical operators for comparison
    label: LogicalOperatorsKind
    type: nc:LogicalOperatorsKind
  nc:MarineUnitKind:
    descr: Kind of marine energy capture
    label: MarineUnitKind
    type: nc:MarineUnitKind
  nc:NuclearReactorKind:
    descr: Kind of nuclear reactor
    label: NuclearReactorKind
    type: nc:NuclearReactorKind
  nc:ObservableQuantityKind:
    descr: Kind of observable quantity
    label: ObservableQuantityKind
    type: nc:ObservableQuantityKind
  nc:OrdinaryContingency:
    descr: Ordinary contingency means the occurrence of a contingency of a single branch or injection
    inherits: ContingencyInterface
    label: OrdinaryContingency
    type: nc:OrdinaryContingency
  nc:OrdinaryPowerTransferCorridor:
    descr: Power transfer corridor defined for normal operating network
    inherits: nc:PowerTransferCorridorInterface
    label: OrdinaryPowerTransferCorridor
    type: nc:OrdinaryPowerTransferCorridor
  nc:OutcomeImpactAssessmentKind:
    descr: Outcome impact assessments kinds
    label: OutcomeImpactAssessmentKind
    type: nc:OutcomeImpactAssessmentKind
  nc:PeakKind:
    descr: Kind of time period with similar intensity
    label: PeakKind
    type: nc:PeakKind
  nc:PinDCTerminalKind:
    descr: The kind of quantities that can serve as an input value for the DCTerminal pin
    label: PinDCTerminalKind
    type: nc:PinDCTerminalKind
  nc:PinEquipment:
    descr: Input pin associated with an Equipment. It is used for the comparison
    inherits: nc:GateInputPinInterface
    label: PinEquipment
    props:
      nc:pinEquipment.Equipment: {}
      nc:pinEquipment.PropertyReference: {}
    type: nc:PinEquipment
  nc:PinEquipmentTripping:
    descr: 'Input pin associated with an Equipment. It is used to determine if the equipment is tripped between two consecutive stages, i.e. the equipment is in service at pre-fault stage and it is out of service at post-fault stage'
    inherits: nc:GateInputPinInterface
    label: PinEquipmentTripping
    props:
      nc:pinEquipmentTripping.Equipment: {}
    type: nc:PinEquipmentTripping
  nc:PinGate:
    descr: An output from one gate represents an input to another gate
    inherits: nc:GateInputPinInterface
    label: PinGate
    props:
      nc:pinGate.GateOutput: {}
    type: nc:PinGate
  nc:PinOperationalLimit:
    descr: Input pin associated with the limits of a Terminal. It is used for comparison
    inherits: nc:GateInputPinInterface
    label: PinOperationalLimit
    props:
      nc:pinOperationalLimit.OperationalLimit: {}
    type: nc:PinOperationalLimit
  nc:PinPowerTransferCorridorKind:
    descr: The kind of quantities that can serve as an input value for the PowerTransferCorridor pin
    label: PinPowerTransferCorridorKind
    type: nc:PinPowerTransferCorridorKind
  nc:PinTerminal:
    descr: Input pin associated with a Terminal. It is used for comparison
    inherits: nc:GateInputPinInterface
    label: PinTerminal
    props:
      nc:pinTerminal.Terminal: {}
      nc:pinTerminal.kind: {}
    type: nc:PinTerminal
  nc:PinTerminalKind:
    descr: The kind of quantities that can serve as an input value for the pin
    label: PinTerminalKind
    type: nc:PinTerminalKind
  nc:PowerBidDependencyKind:
    descr: Kind of power bid dependency
    label: PowerBidDependencyKind
    type: nc:PowerBidDependencyKind
  nc:PowerBlockKind:
    descr: Power block kind describes the increase and/or decrease of power
    label: PowerBlockKind
    type: nc:PowerBlockKind
  nc:PowerElectricalChemicalUnitKind:
    descr: Kind of power electrical chemical unit
    label: PowerElectricalChemicalUnitKind
    type: nc:PowerElectricalChemicalUnitKind
  nc:PowerFrequencyControlKind:
    descr: Kinds of power frequency control modes
    label: PowerFrequencyControlKind
    type: nc:PowerFrequencyControlKind
  nc:PowerScheduleKind:
    descr: Kind of power schedule
    label: PowerScheduleKind
    type: nc:PowerScheduleKind
  nc:PowerShiftKeyKind:
    descr: Kind of generating and load shift keys strategy
    label: PowerShiftKeyKind
    type: nc:PowerShiftKeyKind
  nc:PowerSystemOrganisationRole:
    descr: A role that is responsible for the functional operational of a power system resource
    inherits: nc:PowerSystemOrganisationRoleInterface
    label: PowerSystemOrganisationRole
    type: nc:PowerSystemOrganisationRole
  nc:PowerSystemOrganisationRoleInterface:
    descr: Abstract superclass of nc:PowerSystemOrganisationRole
    inherits: OrganisationRoleInterface
    kind: abstract
  nc:PowerTransferCorridor:
    descr: 'A power transfer corridor is defined as a set of circuits (transmission lines or transformers) separating two portions of the power system, or a subset of circuits exposed to a substantial portion of the transmission exchange between two parts of the system'
    inherits: nc:PowerTransferCorridorInterface
    label: PowerTransferCorridor
    type: nc:PowerTransferCorridor
  nc:PowerTransferCorridorInterface:
    descr: Abstract superclass of nc:PowerTransferCorridor
    inherits: PowerSystemResourceInterface
    kind: abstract
    props:
      nc:powerTransferCorridor.CircuitShare: {}
      nc:powerTransferCorridor.OperationalLimitSet: {}
      nc:powerTransferCorridor.enabled: {}
      nc:powerTransferCorridor.normalEnabled: {}
  nc:PropertyReference:
    descr: The reference to a class and one of its properties
    label: PropertyReference
    props:
      nc:propertyReference.GridStateAlteration: {}
      nc:propertyReference.PinEquipment: {}
      nc:propertyReference.StaticPropertyRange: {}
    type: nc:PropertyReference
  nc:RampingPrincipleKind:
    descr: Kind of ramping principle
    label: RampingPrincipleKind
    type: nc:RampingPrincipleKind
  nc:RangeConstraint:
    descr: Defines the rage constraint
    inherits: nc:RangeConstraintInterface
    label: RangeConstraint
    type: nc:RangeConstraint
  nc:RangeConstraintInterface:
    descr: Abstract superclass of nc:RangeConstraint
    inherits: IdentifiedObjectInterface
    kind: abstract
    props:
      nc:rangeConstraint.GridStateAlteration: {}
      nc:rangeConstraint.direction: {}
      nc:rangeConstraint.normalValue: {}
      nc:rangeConstraint.value: {}
      nc:rangeConstraint.valueKind: {}
  nc:Region:
    descr: A region where the system operator belongs to
    inherits: nc:RegionInterface
    label: Region
    type: nc:Region
  nc:RegionInterface:
    descr: Abstract superclass of nc:Region
    inherits: PowerSystemResourceInterface
    kind: abstract
  nc:RelativeDirectionKind:
    descr: Kind of direction for the changes
    label: RelativeDirectionKind
    type: nc:RelativeDirectionKind
  nc:RemedialActionDependencyKind:
    descr: Kind of dependency between remedial actions
    label: RemedialActionDependencyKind
    type: nc:RemedialActionDependencyKind
  nc:RemedialActionKind:
    descr: The different kinds for a remedial action
    label: RemedialActionKind
    type: nc:RemedialActionKind
  nc:RemedialActionScheduleAcceptanceKind:
    descr: The kind of acceptance for a remedial action schedule
    label: RemedialActionScheduleAcceptanceKind
    type: nc:RemedialActionScheduleAcceptanceKind
  nc:RemedialActionScheduleDependencyKind:
    descr: Kind of dependency between remedial action schedules
    label: RemedialActionScheduleDependencyKind
    type: nc:RemedialActionScheduleDependencyKind
  nc:RemedialActionScheduleStatusKind:
    descr: Remedial action schedule status kinds
    label: RemedialActionScheduleStatusKind
    type: nc:RemedialActionScheduleStatusKind
  nc:RemedialActionScheme:
    descr: |-
      Remedial Action Scheme (RAS), Special Protection Schemes (SPS), System Protection Schemes (SPS) or System Integrity Protection Schemes (SIPS).
      A Remedial Action Scheme consists of one or more stages that can trigger and execute a protection action
    inherits: PowerSystemResourceInterface
    label: RemedialActionScheme
    props:
      nc:remedialActionScheme.Stage: {}
      nc:remedialActionScheme.armed: {}
      nc:remedialActionScheme.inService: {}
      nc:remedialActionScheme.kind: {}
      nc:remedialActionScheme.normalArmed: {}
    type: nc:RemedialActionScheme
  nc:RemedialActionSchemeKind:
    descr: Classification of Remedial Action Scheme
    label: RemedialActionSchemeKind
    type: nc:RemedialActionSchemeKind
  nc:RotatingMachineAction:
    descr: Rotating machine action
    inherits: nc:SetPointActionInterface
    label: RotatingMachineAction
    props:
      nc:rotatingMachineAction.RotatingMachine: {}
    type: nc:RotatingMachineAction
  nc:RotatingMachineControlModeKind:
    descr: Kind of rotating machine controller mode
    label: RotatingMachineControlModeKind
    type: nc:RotatingMachineControlModeKind
  nc:SSSCControlModeKind:
    descr: Control modes of the Static Synchronous Series Compensator (SSSC)
    label: SSSCControlModeKind
    type: nc:SSSCControlModeKind
  nc:ScheduleResource:
    descr: 'A schedule resource is a market-based method for handling participation of small units, particularly located on the lower voltage level that is controlled by a Distributed System Operator (DSO). It is a collection of units that can operate in the market by providing bids, offers and a resulting committed operational schedule for the collection'
    inherits: PowerSystemResourceInterface
    label: ScheduleResource
    props:
      nc:scheduleResource.GeneratingUnit: {}
    type: nc:ScheduleResource
  nc:SchedulingArea:
    descr: 'An area where production and/or consumption of energy can be forecasted, scheduled and measured. The area is operated by only one system operator, typically a Transmission System Operator (TSO). The area can consist of a sub area, which has the same definition as the main area, but it can be operated by another system operator (typically Distributed System Operator (DSO) or a Closed Distributed System Operator (CDSO)). This includes microgrid concept. A substation is the smallest grouping that can'
    inherits: PowerSystemResourceInterface
    label: SchedulingArea
    props:
      nc:schedulingArea.BiddingZone: {}
      nc:schedulingArea.ControlArea: {}
      nc:schedulingArea.SynchronousArea: {}
      nc:schedulingArea.normalParticipationFactor: {}
      nc:schedulingArea.participationFactor: {}
    type: nc:SchedulingArea
  nc:SecuredExclusionReasonKind:
    descr: The kind of secured exclusion reason
    label: SecuredExclusionReasonKind
    type: nc:SecuredExclusionReasonKind
  nc:SecurityCoordinator:
    descr: A role that coordinates the relevant remedial actions and their optimisation to ensure efficient use to achieve required operational security of the power system
    inherits: nc:SystemOperationCoordinatorInterface
    label: SecurityCoordinator
    type: nc:SecurityCoordinator
  nc:SensitivityMatrixKind:
    descr: Kinds of sensitivity matrix
    label: SensitivityMatrixKind
    type: nc:SensitivityMatrixKind
  nc:SetPointAction:
    descr: Setpoint action
    inherits: nc:SetPointActionInterface
    label: SetPointAction
    type: nc:SetPointAction
  nc:SetPointActionInterface:
    descr: Abstract superclass of nc:SetPointAction
    inherits: nc:GridStateAlterationInterface
    kind: abstract
  nc:ShiftMethodKind:
    descr: Kind of shift method. Describes the way a power schedule should be distributed amongst production and consumption. e.g. Type of generating and load shift key
    label: ShiftMethodKind
    type: nc:ShiftMethodKind
  nc:Stage:
    descr: Stage of a remedial action scheme
    inherits: IdentifiedObjectInterface
    label: Stage
    props:
      nc:stage.GridStateAlterationCollection: {}
      nc:stage.RemedialActionScheme: {}
      nc:stage.StageTrigger: {}
      nc:stage.priority: {}
    type: nc:Stage
  nc:StageTrigger:
    descr: Stage that is triggered either by TriggerCondition or by gate condition within a stage
    inherits: PowerSystemResourceInterface
    label: StageTrigger
    props:
      nc:stageTrigger.GateTrigger: {}
      nc:stageTrigger.Stage: {}
      nc:stageTrigger.armed: {}
      nc:stageTrigger.inService: {}
      nc:stageTrigger.normalArmed: {}
      nc:stageTrigger.priority: {}
    type: nc:StageTrigger
  nc:StaticPropertyRange:
    descr: 'Defines the static range, which means that this is the minimum and/or maximum of an attribute value. The value provided by the schedule replaces the value of the attribute to which the schedule refers to. In case that the PropertyReference refers to Boolean type attributes, RangeConstraint.direction shall be none or upAndDown and the RangeConstraint.valueKind shall be absolute. If the direction is none then optimization of the attribute referenced by the PropertyReference is not possible if the current'
    inherits: nc:RangeConstraintInterface
    label: StaticPropertyRange
    props:
      nc:staticPropertyRange.PropertyReference: {}
    type: nc:StaticPropertyRange
  nc:SubstationControllerModeKind:
    descr: Kind of substation controller mode
    label: SubstationControllerModeKind
    type: nc:SubstationControllerModeKind
  nc:SynchronousArea:
    descr: A synchronous area is an electrical area covered by interconnect with a common system frequency in a steady-state
    inherits: PowerSystemResourceInterface
    label: SynchronousArea
    props:
      nc:synchronousArea.SchedulingArea: {}
      nc:synchronousArea.nominalFrequency: {}
    type: nc:SynchronousArea
  nc:SystemOperationCoordinator:
    descr: A role that coordinates relevant information and impact in regards to operating the power system
    inherits: nc:SystemOperationCoordinatorInterface
    label: SystemOperationCoordinator
    type: nc:SystemOperationCoordinator
  nc:SystemOperationCoordinatorInterface:
    descr: Abstract superclass of nc:SystemOperationCoordinator
    inherits: nc:PowerSystemOrganisationRoleInterface
    kind: abstract
  nc:SystemOperator:
    descr: System operator
    inherits: nc:SystemOperatorInterface
    label: SystemOperator
    type: nc:SystemOperator
  nc:SystemOperatorInterface:
    descr: Abstract superclass of nc:SystemOperator
    inherits: nc:PowerSystemOrganisationRoleInterface
    kind: abstract
    props:
      nc:systemOperator.Contingency: {}
  nc:SystemUnitKind:
    descr: 'A system unit is defined as:  A group of components which are delimited by one or more circuit breakers.  Note 1: the system unit concept has been defined to simplify the calculation of availability. While a system unit is always delimited by circuit breakers, an individual component may not always be. A system unit may therefore contain more than one component.   Note 2: the circuit breakers are not included in the system unit.   Note 3: a tripped element is synonymous to a tripped system unit'
    label: SystemUnitKind
    type: nc:SystemUnitKind
  nc:TCSCControlModeKind:
    descr: Kind of TCSC control mode
    label: TCSCControlModeKind
    type: nc:TCSCControlModeKind
  nc:TimeSeriesInterpolationKind:
    descr: Kinds of interpolation of values between two time point
    label: TimeSeriesInterpolationKind
    type: nc:TimeSeriesInterpolationKind
  nc:TopologyAction:
    descr: Topology action means the connection or disconnection of a switch in the grid model compared to the base case
    inherits: nc:GridStateAlterationInterface
    label: TopologyAction
    props:
      nc:topologyAction.Switch: {}
    type: nc:TopologyAction
  nc:TransmissionSystemOperator:
    descr: A system operator role that is responsible for operating of an energy transmission network
    inherits: nc:SystemOperatorInterface
    label: TransmissionSystemOperator
    type: nc:TransmissionSystemOperator
  nc:TripKind:
    descr: |-
      Whether the type of the trip due to the outage was automatic, automatic with successful automatic reclosing or manual.
      
      In case of a fault in the reclosing automatics resulting in lack of reclosing, automatic should be chosen as an alternative
    label: TripKind
    type: nc:TripKind
  nc:ValueOffsetKind:
    descr: The kind of the value offset
    label: ValueOffsetKind
    type: nc:ValueOffsetKind
prefixes:
  adms: http://www.w3.org/ns/adms#
  cim: https://cim.ucaiug.io/ns#
  cimr: https://cim.ucaiug.io/rules#
  cims: http://iec.ch/TC57/1999/rdf-schema-extensions-19990926#
  dcat: http://www.w3.org/ns/dcat#
  dct: http://purl.org/dc/terms/
  eu: https://cim.ucaiug.io/ns/eu#
  nc: https://cim4.eu/ns/nc#
  owl: http://www.w3.org/2002/07/owl#
  prov: http://www.w3.org/ns/prov#
  psys: http://proton.semanticweb.org/protonsys#
  qudt: http://qudt.org/schema/qudt/
  rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#
  rdfs: http://www.w3.org/2000/01/rdf-schema#
  skos: http://www.w3.org/2004/02/skos/core#
  unit: http://qudt.org/vocab/unit/
  vann: http://purl.org/vocab/vann/
  xsd: http://www.w3.org/2001/XMLSchema#
properties:
  aCDCTerminal.OperationalLimitSet:
    descr: The operational limit sets at the terminal
    inverseOf: operationalLimitSet.Terminal
    kind: object
    label: OperationalLimitSet
    max: inf
    range: OperationalLimitSet
    rdfProp: cim:ACDCTerminal.OperationalLimitSet
  aCDCTerminal.connected:
    descr: 'The connected status is related to a bus-branch model and the topological node to terminal relation.  True implies the terminal is connected to the related topological node and false implies it is not.  In a bus-branch model, the connected status is used to tell if equipment is disconnected without having to change the connectivity described by the topological node to terminal relation. A valid case is that conducting equipment can be connected in one end and open in the other. In particular for'
    kind: literal
    label: connected
    range: boolean
    rdfProp: cim:ACDCTerminal.connected
  aCDCTerminal.sequenceNumber:
    descr: The orientation of the terminal connections for a multiple terminal conducting equipment.  The sequence numbering starts with 1 and additional terminals should follow in increasing order.   The first terminal is the "starting point" for a two terminal branch
    kind: literal
    label: sequenceNumber
    range: integer
    rdfProp: cim:ACDCTerminal.sequenceNumber
  aCLineSegment.b0ch:
    descr: 'Zero sequence shunt (charging) susceptance, uniformly distributed, of the entire line section'
    kind: literal
    label: b0ch
    range: double
    rdfProp: cim:ACLineSegment.b0ch
  aCLineSegment.bch:
    descr: 'Positive sequence shunt (charging) susceptance, uniformly distributed, of the entire line section.  This value represents the full charging over the full length of the line'
    kind: literal
    label: bch
    range: double
    rdfProp: cim:ACLineSegment.bch
  aCLineSegment.g0ch:
    descr: 'Zero sequence shunt (charging) conductance, uniformly distributed, of the entire line section'
    kind: literal
    label: g0ch
    range: double
    rdfProp: cim:ACLineSegment.g0ch
  aCLineSegment.gch:
    descr: 'Positive sequence shunt (charging) conductance, uniformly distributed, of the entire line section'
    kind: literal
    label: gch
    range: double
    rdfProp: cim:ACLineSegment.gch
  aCLineSegment.r:
    descr: Positive sequence series resistance of the entire line section
    kind: literal
    label: r
    range: double
    rdfProp: cim:ACLineSegment.r
  aCLineSegment.r0:
    descr: Zero sequence series resistance of the entire line section
    kind: literal
    label: r0
    range: double
    rdfProp: cim:ACLineSegment.r0
  aCLineSegment.shortCircuitEndTemperature:
    descr: Maximum permitted temperature at the end of SC for the calculation of minimum short-circuit currents. Used for short circuit data exchange according to IEC 60909
    kind: literal
    label: shortCircuitEndTemperature
    range: double
    rdfProp: cim:ACLineSegment.shortCircuitEndTemperature
  aCLineSegment.x:
    descr: Positive sequence series reactance of the entire line section
    kind: literal
    label: x
    range: double
    rdfProp: cim:ACLineSegment.x
  aCLineSegment.x0:
    descr: Zero sequence series reactance of the entire line section
    kind: literal
    label: x0
    range: double
    rdfProp: cim:ACLineSegment.x0
  activePowerLimit.normalValue:
    descr: The normal value of active power limit. The attribute shall be a positive value or zero
    kind: literal
    label: normalValue
    range: double
    rdfProp: cim:ActivePowerLimit.normalValue
  activePowerLimit.value:
    descr: Value of active power limit. The attribute shall be a positive value or zero
    kind: literal
    label: value
    range: double
    rdfProp: cim:ActivePowerLimit.value
  adms:versionNotes:
    descr: A description of changes between this version and the previous version of the resource
    kind: literal
    label: versionNotes
    range: string
    rdfProp: adms:versionNotes
  analog.AnalogValues:
    descr: The values connected to this measurement
    inverseOf: analogValue.Analog
    kind: object
    label: AnalogValues
    max: inf
    range: AnalogValue
    rdfProp: cim:Analog.AnalogValues
  analog.positiveFlowIn:
    descr: 'If true then this measurement is an active power, reactive power or current with the convention that a positive value measured at the Terminal means power is flowing into the related PowerSystemResource'
    kind: literal
    label: positiveFlowIn
    range: boolean
    rdfProp: cim:Analog.positiveFlowIn
  analogValue.Analog:
    descr: Measurement to which this value is connected
    inverseOf: analog.AnalogValues
    kind: object
    label: Analog
    range: Analog
    rdfProp: cim:AnalogValue.Analog
  auxiliaryEquipment.Terminal:
    descr: The Terminal at the equipment where the AuxiliaryEquipment is attached
    inverseOf: terminal.AuxiliaryEquipment
    kind: object
    label: Terminal
    range: Terminal
    rdfProp: cim:AuxiliaryEquipment.Terminal
  baseVoltage.ConductingEquipment:
    descr: 'All conducting equipment with this base voltage.  Use only when there is no voltage level container used and only one base voltage applies.  For example, not used for transformers'
    inverseOf: conductingEquipment.BaseVoltage
    kind: object
    label: ConductingEquipment
    max: inf
    range: ConductingEquipmentInterface
    rdfProp: cim:BaseVoltage.ConductingEquipment
  baseVoltage.TopologicalNode:
    descr: The topological nodes at the base voltage
    inverseOf: topologicalNode.BaseVoltage
    kind: object
    label: TopologicalNode
    max: inf
    range: TopologicalNode
    rdfProp: cim:BaseVoltage.TopologicalNode
  baseVoltage.TransformerEnds:
    descr: Transformer ends at the base voltage.  This is essential for PU calculation
    inverseOf: transformerEnd.BaseVoltage
    kind: object
    label: TransformerEnds
    max: inf
    range: TransformerEndInterface
    rdfProp: cim:BaseVoltage.TransformerEnds
  baseVoltage.VoltageLevel:
    descr: The voltage levels having this base voltage
    inverseOf: voltageLevel.BaseVoltage
    kind: object
    label: VoltageLevel
    max: inf
    range: VoltageLevel
    rdfProp: cim:BaseVoltage.VoltageLevel
  baseVoltage.nominalVoltage:
    descr: The power system resource's base voltage.  Shall be a positive value and not zero
    kind: literal
    label: nominalVoltage
    range: double
    rdfProp: cim:BaseVoltage.nominalVoltage
  bay.VoltageLevel:
    descr: The voltage level containing this bay
    inverseOf: voltageLevel.Bays
    kind: object
    label: VoltageLevel
    range: VoltageLevel
    rdfProp: cim:Bay.VoltageLevel
  busbarSection.ipMax:
    descr: |-
      Maximum allowable peak short-circuit current of busbar (Ipmax in IEC 60909-0). 
      Mechanical limit of the busbar in the substation itself. Used for short circuit data exchange according to IEC 60909
    kind: literal
    label: ipMax
    range: double
    rdfProp: cim:BusbarSection.ipMax
  cimr:connectedThroughPart:
    descr: 'Equipment or EquipmentContainer is connected to Equipment or EquipmentContainer through some of its transitive parts, and their terminals and a common ConnectivityNode'
    kind: object
    label: connected through part
    max: inf
    range: cimr:EquipmentOrContainerInterface
    rdfProp: cimr:connectedThroughPart
    symmetric: true
  cimr:connectedTo:
    descr: Equipment is connected to Equipment through some of their terminals and a common ConnectivityNode
    kind: object
    label: connected to
    max: inf
    range: EquipmentInterface
    rdfProp: cimr:connectedTo
    symmetric: true
  cimr:equipment.Terminals:
    descr: Terminals of the equipment
    inverseOf: cimr:terminal.Equipment
    kind: object
    label: terminals
    max: inf
    range: Terminal
    rdfProp: cimr:Equipment.Terminals
  cimr:hasPart:
    descr: Equipment or Container has part. Disjunction of the props listed in skos:example
    inverseOf: cimr:isPart
    kind: object
    label: has part
    max: inf
    range: cimr:EquipmentOrContainerInterface
    rdfProp: cimr:hasPart
  cimr:hasPartTransitive:
    descr: EquipmentContainer and its subcontainers have part Equipment. Transitive closure of cimr:hasPart
    inverseOf: cimr:isPartTransitive
    kind: object
    label: has part transitive
    max: inf
    range: cimr:EquipmentOrContainerInterface
    rdfProp: cimr:hasPartTransitive
  cimr:isPart:
    descr: Equipment is part of EquipmentContainer. Disjunction of the props listed in skos:example
    inverseOf: cimr:hasPart
    kind: object
    label: is part
    max: inf
    range: cimr:EquipmentOrContainerInterface
    rdfProp: cimr:isPart
  cimr:isPartTransitive:
    descr: Equipment is part of EquipmentContainer and its super-containers. Transitive closure of cimr:isPart
    inverseOf: cimr:hasPartTransitive
    kind: object
    label: is part transitive
    max: inf
    range: cimr:EquipmentOrContainerInterface
    rdfProp: cimr:isPartTransitive
  cimr:measurement.isInCognite:
    descr: Flag indicating if a cim:Analog measurement represents to a Cognite timeseries
    kind: literal
    label: Measurement is in Cognite
    max: inf
    range: boolean
    rdfProp: cimr:Measurement.isInCognite
  cimr:mridSignificantPart:
    descr: CIM UUIDs vary in the first component and confuse some indexers. This property isolates only the significant part if the id for easier indexing
    kind: literal
    label: MRID significant part
    max: inf
    range: string
    rdfProp: cimr:mridSignificantPart
  cimr:terminal.Equipment:
    descr: The equipment of the terminal. Disjunction of the props listed in skos:example
    inverseOf: cimr:equipment.Terminals
    kind: object
    label: equipment
    max: inf
    range: EquipmentInterface
    rdfProp: cimr:Terminal.Equipment
  cims:pragmatics:
    descr: Specific SPARQL guidance and important practical information for an LLM. Applies to Classes and Properties
    kind: literal
    label: LLM Pragmatics
    max: inf
    range: string
    rdfProp: cims:pragmatics
  conductingEquipment.BaseVoltage:
    descr: 'Base voltage of this conducting equipment.  Use only when there is no voltage level container used and only one base voltage applies.  For example, not used for transformers'
    inverseOf: baseVoltage.ConductingEquipment
    kind: object
    label: BaseVoltage
    range: BaseVoltage
    rdfProp: cim:ConductingEquipment.BaseVoltage
  conductingEquipment.SvStatus:
    descr: The status state variable associated with this conducting equipment
    inverseOf: svStatus.ConductingEquipment
    kind: object
    label: SvStatus
    range: SvStatus
    rdfProp: cim:ConductingEquipment.SvStatus
  conductingEquipment.Terminals:
    descr: Conducting equipment have terminals that may be connected to other conducting equipment terminals via connectivity nodes or topological nodes
    inverseOf: terminal.ConductingEquipment
    kind: object
    label: Terminals
    max: inf
    range: Terminal
    rdfProp: cim:ConductingEquipment.Terminals
  conductor.length:
    descr: Segment length for calculating line section capabilities
    kind: literal
    label: length
    range: double
    rdfProp: cim:Conductor.length
  conformLoad.LoadGroup:
    descr: Group of this ConformLoad
    inverseOf: conformLoadGroup.EnergyConsumers
    kind: object
    label: LoadGroup
    range: ConformLoadGroup
    rdfProp: cim:ConformLoad.LoadGroup
  conformLoadGroup.EnergyConsumers:
    descr: Conform loads assigned to this ConformLoadGroup
    inverseOf: conformLoad.LoadGroup
    kind: object
    label: EnergyConsumers
    max: inf
    range: ConformLoad
    rdfProp: cim:ConformLoadGroup.EnergyConsumers
  connectivityNode.ConnectivityNodeContainer:
    descr: Container of this connectivity node
    inverseOf: connectivityNodeContainer.ConnectivityNodes
    kind: object
    label: ConnectivityNodeContainer
    range: ConnectivityNodeContainerInterface
    rdfProp: cim:ConnectivityNode.ConnectivityNodeContainer
  connectivityNode.Terminals:
    descr: Terminals interconnected with zero impedance at a this connectivity node
    inverseOf: terminal.ConnectivityNode
    kind: object
    label: Terminals
    max: inf
    range: Terminal
    rdfProp: cim:ConnectivityNode.Terminals
  connectivityNode.TopologicalNode:
    descr: The topological node to which this connectivity node is assigned.  May depend on the current state of switches in the network
    inverseOf: topologicalNode.ConnectivityNodes
    kind: object
    label: TopologicalNode
    range: TopologicalNode
    rdfProp: cim:ConnectivityNode.TopologicalNode
  connectivityNodeContainer.ConnectivityNodes:
    descr: Connectivity nodes which belong to this connectivity node container
    inverseOf: connectivityNode.ConnectivityNodeContainer
    kind: object
    label: ConnectivityNodes
    max: inf
    range: ConnectivityNode
    rdfProp: cim:ConnectivityNodeContainer.ConnectivityNodes
  connectivityNodeContainer.TopologicalNode:
    descr: The topological nodes which belong to this connectivity node container
    inverseOf: topologicalNode.ConnectivityNodeContainer
    kind: object
    label: TopologicalNode
    max: inf
    range: TopologicalNode
    rdfProp: cim:ConnectivityNodeContainer.TopologicalNode
  contingency.ContingencyElement:
    descr: A contingency can have any number of contingency elements
    inverseOf: contingencyElement.Contingency
    kind: object
    label: ContingencyElement
    max: inf
    range: ContingencyElementInterface
    rdfProp: cim:Contingency.ContingencyElement
  contingency.mustStudy:
    descr: Set true if must study this contingency
    kind: literal
    label: mustStudy
    range: boolean
    rdfProp: cim:Contingency.mustStudy
  contingencyElement.Contingency:
    descr: A contingency element belongs to one contingency
    inverseOf: contingency.ContingencyElement
    kind: object
    label: Contingency
    range: ContingencyInterface
    rdfProp: cim:ContingencyElement.Contingency
  contingencyEquipment.Equipment:
    descr: The single piece of equipment to which to apply the contingency
    inverseOf: equipment.ContingencyEquipment
    kind: object
    label: Equipment
    range: EquipmentInterface
    rdfProp: cim:ContingencyEquipment.Equipment
  contingencyEquipment.contingentStatus:
    descr: 'The status for the associated equipment when in the contingency state.   This status is independent of the case to which the contingency is originally applied, but defines the equipment status when the contingency is applied'
    kind: object
    label: contingentStatus
    range: ContingencyEquipmentStatusKind
    rdfProp: cim:ContingencyEquipment.contingentStatus
  controlArea.ControlAreaGeneratingUnit:
    descr: The generating unit specifications for the control area
    inverseOf: controlAreaGeneratingUnit.ControlArea
    kind: object
    label: ControlAreaGeneratingUnit
    max: inf
    range: ControlAreaGeneratingUnit
    rdfProp: cim:ControlArea.ControlAreaGeneratingUnit
  controlArea.EnergyArea:
    descr: The energy area that is forecast from this control area specification
    inverseOf: energyArea.ControlArea
    kind: object
    label: EnergyArea
    range: EnergyAreaInterface
    rdfProp: cim:ControlArea.EnergyArea
  controlArea.netInterchange:
    descr: 'The specified positive net interchange into the control area, i.e. positive sign means flow into the area'
    kind: literal
    label: netInterchange
    range: double
    rdfProp: cim:ControlArea.netInterchange
  controlArea.pTolerance:
    descr: Active power net interchange tolerance. The attribute shall be a positive value or zero
    kind: literal
    label: pTolerance
    range: double
    rdfProp: cim:ControlArea.pTolerance
  controlArea.type:
    descr: 'The primary type of control area definition used to determine if this is used for automatic generation control, for planning interchange control, or other purposes.   A control area specified with primary type of automatic generation control could still be forecast and used as an interchange area in power flow analysis'
    kind: object
    label: type
    range: ControlAreaTypeKind
    rdfProp: cim:ControlArea.type
  controlAreaGeneratingUnit.ControlArea:
    descr: The parent control area for the generating unit specifications
    inverseOf: controlArea.ControlAreaGeneratingUnit
    kind: object
    label: ControlArea
    range: ControlArea
    rdfProp: cim:ControlAreaGeneratingUnit.ControlArea
  controlAreaGeneratingUnit.GeneratingUnit:
    descr: The generating unit specified for this control area.  Note that a control area should include a GeneratingUnit only once
    inverseOf: generatingUnit.ControlAreaGeneratingUnit
    kind: object
    label: GeneratingUnit
    range: GeneratingUnit
    rdfProp: cim:ControlAreaGeneratingUnit.GeneratingUnit
  coordinateSystem.Locations:
    descr: All locations described with position points in this coordinate system
    inverseOf: location.CoordinateSystem
    kind: object
    label: Locations
    max: inf
    range: Location
    rdfProp: cim:CoordinateSystem.Locations
  coordinateSystem.crsUrn:
    descr: "A Uniform Resource Name (URN) for the coordinate reference system (crs) used to define 'Location.PositionPoints'. An example would be the European Petroleum Survey Group (EPSG) code for a coordinate reference system, defined in URN under the Open Geospatial Consortium (OGC) namespace as: urn:ogc:def:crs:EPSG::XXXX, where XXXX is an EPSG code (a full list of codes can be found at the EPSG Registry web site http://www.epsg-registry.org/). To define the coordinate system as being WGS84 (latitude, longitude)"
    kind: literal
    label: crsUrn
    range: string
    rdfProp: cim:CoordinateSystem.crsUrn
  currentLimit.normalValue:
    descr: The normal value for limit on current flow. The attribute shall be a positive value or zero
    kind: literal
    label: normalValue
    range: double
    rdfProp: cim:CurrentLimit.normalValue
  currentLimit.value:
    descr: Limit on current flow. The attribute shall be a positive value or zero
    kind: literal
    label: value
    range: double
    rdfProp: cim:CurrentLimit.value
  curve.CurveDatas:
    descr: The point data values that define this curve
    inverseOf: curveData.Curve
    kind: object
    label: CurveDatas
    max: inf
    range: CurveData
    rdfProp: cim:Curve.CurveDatas
  curveData.Curve:
    descr: The curve of  this curve data point
    inverseOf: curve.CurveDatas
    kind: object
    label: Curve
    range: CurveInterface
    rdfProp: cim:CurveData.Curve
  dcat:endDate:
    descr: |-
      This property contains the end of the period.
      [CIM context:
      The end date and time of the validity period of the model that it is serialized in the document where the header is located. It is only used in relation to the startDate property which indicates the beginning of the validity period of the model.]
    kind: literal
    label: endDate
    range: dateTime
    rdfProp: dcat:endDate
  dcat:hasVersion:
    descr: |-
      This resource is a version of a non-versioned or abstract resource.
      This property is intended for relating a versioned resource to a non-versioned or abstract resource.
      
      The notion of version used by this property is limited to versions resulting from revisions occurring to a resource as part of its life-cycle. Therefore, its semantics is more specific than its super-property dct:isVersionOf, which makes use of a broader notion of version, including editions and adaptations
    inverseOf: dcat:isVersionOf
    kind: object
    label: hasVersion
    max: inf
    range: dcat:Dataset
    rdfProp: dcat:hasVersion
  dcat:isVersionOf:
    descr: |-
      This resource has a more specific, versioned resource. This property is intended for relating a non-versioned or abstract resource to several versioned resources, e.g., snapshots.
      
      The notion of version used by this property is limited to versions resulting from revisions occurring to a resource as part of its life-cycle. Therefore, its semantics is more specific than its super-property dct:hasVersion, which makes use of a broader notion of version, including editions and adaptations
    inverseOf: dcat:hasVersion
    kind: object
    label: isVersionOf
    range: dcat:Dataset
    rdfProp: dcat:isVersionOf
  dcat:keyword:
    descr: 'A keyword or tag describing a resource. [CIM context: The intended content type of the model, usually the profile keyword. Used to identify what profiles and content is expected in the document, e.g., Equipment, Boundary, SSH, AE, etc. The same keyword is used for different versions of same profile. It can be also used to identify different content based on the same profile. For instance, as the equipment profile can be used for both boundary data and equipment not related to boundary, the keyword'
    kind: literal
    label: keyword
    range: string
    rdfProp: dcat:keyword
  dcat:startDate:
    descr: 'This property contains the start of the  period. [CIM context: The date and time that this model represents, i.e. for which the model is (or was) valid. It indicates the beginning of the validity period. It is indicating either an instant (in cases where the model is only valid for a point in time) or the start time of a period. If not provided the model is considered valid for any time stamp. The format is an extended format according to the ISO 8601-2005. European exchanges shall refer to UTC.]. This property contains the start of the period. [CIM context: The date and time that this model represents, i.e. for which the model is (or was) valid. It indicates the beginning of the validity period. It is indicating either an instant (in cases where the model is only valid for a point in time) or the start time of a period. If not provided the model is considered valid for any time stamp. The format is an extended format according to the ISO 8601-2005. European exchanges shall refer to UTC.]'
    kind: literal
    label: startDate
    range: dateTime
    rdfProp: dcat:startDate
  dcat:temporalResolution:
    descr: |-
      Minimum time period resolvable in a dataset.
      [CIM context: 
      Describes the Market Time Unit (MTU), e.g. hourly, 15 min., etc.]. Minimum time period resolvable in the dataset.
      [CIM context: 
      
      Describes the Market Time Unit (MTU), e.g. hourly, 15 min., etc.]
    kind: literal
    label: temporalResolution
    range: string
    rdfProp: dcat:temporalResolution
  dcat:version:
    descr: The version indicator (name or identifier) of a resource. The version number of a resource
    kind: literal
    label: version
    range: string
    rdfProp: dcat:version
  dct:accessRights:
    descr: |-
      Information about who access the resource or an indication of its security status. Access Rights may include information regarding access or restrictions based on privacy, security, or other policies.
      [CIM context:
      Reference to the confidentiality level that shall be applied when handling this model.]
    inverseOf: dct:resource1
    kind: object
    label: accessRights
    range: dcat:Dataset
    rdfProp: dct:accessRights
  dct:conformsTo:
    descr: 'An established standard to which the described resource conforms. [CIM context: An IRI describing the profile that governs this model. It uniquely identifies the profile and its version. Multiple instances of the property describe all standards or specifications to which the model and the document representing this model conform to. A document would normally conform to profile definitions, the constraints that relate to the profile and/or the set of business specific constrains. A reference to a'
    inverseOf: dct:resource2
    kind: object
    label: conformsTo
    max: inf
    range: dcat:Dataset
    rdfProp: dct:conformsTo
  dct:description:
    descr: |-
      A free-text account of the item. A free-text account of the resource.
      Description may include but is not limited to: an abstract, a table of contents, a graphical representation, or a free-text account of the resource
    kind: literal
    label: description
    range: string
    rdfProp: dct:description
  dct:identifier:
    descr: 'A unique identifier of the resource being described or cataloged. The identifier might be used as part of the IRI of the resource, but still having it represented explicitly is useful. The identifier is a text string which is assigned to the resource to provide an unambiguous reference within a particular context. [CIM context: A unique identifier of the model which is serialised in the document where the header is located. The identifier is persistent for a given version of the model and shall change. An unambiguous reference to the resource within a given context. Recommended practice is to identify the resource by means of a string conforming to an identification system. Examples include International Standard Book Number (ISBN), Digital Object Identifier (DOI), and Uniform Resource Name (URN). Persistent identifiers should be provided as HTTP URIs. [CIM context: A unique identifier of the model which is serialised in the document where the header is located. The identifier is persistent for'
    kind: literal
    label: identifier
    range: string
    rdfProp: dct:identifier
  dct:issued:
    descr: |-
      Date of formal issuance of the resource.
      Recommended practice is to describe the date, date/time, or period of time as recommended for the property Date, of which this is a subproperty.
      [CIM context:
      Reference to the date that the complete data set was made valid/available.]. The date of listing (i.e., formal recording) of the corresponding dataset or service in the catalog.
      [CIM context:
      Reference to the date that the complete data set was made valid/available.]
    kind: literal
    label: issued
    range: dateTime
    rdfProp: dct:issued
  dct:license:
    descr: |-
      A legal document giving official permission to do something with the resource. Recommended practice is to identify the license document with a URI. If this is not possible or feasible, a literal value that identifies the license may be provided.
      [CIM context:
      Reference to the license under which the data is made available. If no license holder is defined, then the original data provider holds the license.]
    inverseOf: dct:resource3
    kind: object
    label: license
    range: dcat:Dataset
    rdfProp: dct:license
  dct:references:
    descr: |-
      A related resource that is referenced, cited, or otherwise pointed to by the described resource[.
      [CIM context: 
      The referenced resource that is being complemented in this dataset, e.g. SSH is referencing EQ.]
    inverseOf: dct:resource13
    kind: object
    label: references
    max: inf
    range: dcat:Dataset
    rdfProp: dct:references
  dct:resource1:
    descr: The resource that has these access rights
    inverseOf: dct:accessRights
    kind: object
    label: Resource1
    max: inf
    range: dcat:Dataset
    rdfProp: dct:Resource1
  dct:resource10:
    descr: The resource that has this spatial location
    inverseOf: dct:spatial
    kind: object
    label: Resource10
    max: inf
    range: dcat:Dataset
    rdfProp: dct:Resource10
  dct:resource13:
    descr: The resource that has these recerences
    inverseOf: dct:references
    kind: object
    label: Resource13
    max: inf
    range: dcat:Dataset
    rdfProp: dct:Resource13
  dct:resource2:
    descr: The resource that conforms to
    inverseOf: dct:conformsTo
    kind: object
    label: Resource2
    max: inf
    range: dcat:Dataset
    rdfProp: dct:Resource2
  dct:resource3:
    descr: The resource that has this license
    inverseOf: dct:license
    kind: object
    label: Resource3
    max: inf
    range: dcat:Dataset
    rdfProp: dct:Resource3
  dct:resource4:
    descr: The resource that has this type
    inverseOf: dct:type
    kind: object
    label: Resource4
    max: inf
    range: dcat:Dataset
    rdfProp: dct:Resource4
  dct:rights:
    descr: 'A statement that concerns all rights not addressed with dct:license or dct:accessRights, such as copyright statements'
    kind: literal
    label: rights
    range: string
    rdfProp: dct:rights
  dct:rightsHolder:
    descr: |-
      Information about rights held in and over the resource.
      Typically, rights information includes a statement about various property rights associated with the resource, including intellectual property rights. Recommended practice is to refer to a rights statement with a URI. If this is not possible or feasible, a literal value (name, label, or short text) may be provided. Information about rights held in and over the resource. Typically, rights information includes a statement about various property rights associated with the resource, including intellectual property rights. Recommended practice is to refer to a rights statement with a URI. If this is not possible or feasible, a literal value (name, label, or short text) may be provided
    kind: literal
    label: rightsHolder
    range: string
    rdfProp: dct:rightsHolder
  dct:spatial:
    descr: |-
      The geographical area covered by the dataset.
      [CIM context: 
      The responsibility area that multiple model can describe, also referred to frame.]
    inverseOf: dct:resource10
    kind: object
    label: spatial
    range: dcat:Dataset
    rdfProp: dct:spatial
  dct:title:
    descr: |-
      A name given to the resource
      [CIM context: 
      
      The human readable name of the dataset that can form the instance file name.]. A name given to the resource.
      [CIM context: 
      The human readable name of the dataset that can form the instance file name.]
    kind: literal
    label: title
    range: string
    rdfProp: dct:title
  dct:type:
    descr: 'The nature or genre of the resource. Recommended practice is to use a controlled vocabulary such as the DCMI Type Vocabulary [DCMI-TYPE]. To describe the file format, physical medium, or dimensions of the resource, use the property Format'
    inverseOf: dct:resource4
    kind: object
    label: type
    range: dcat:Dataset
    rdfProp: dct:type
  diagram.DiagramElements:
    descr: A diagram is made up of multiple diagram objects
    inverseOf: diagramObject.Diagram
    kind: object
    label: DiagramElements
    max: inf
    range: DiagramObjectInterface
    rdfProp: cim:Diagram.DiagramElements
  diagram.orientation:
    descr: 'Coordinate system orientation of the diagram. A positive orientation gives standard “right-hand” orientation, with negative orientation indicating a “left-hand” orientation. For 2D diagrams, a positive orientation will result in X values increasing from left to right and Y values increasing from bottom to top. A negative orientation gives the “left-hand” orientation (favoured by computer graphics displays) with X values increasing from left to right and Y values increasing from top to bottom'
    kind: object
    label: orientation
    range: OrientationKind
    rdfProp: cim:Diagram.orientation
  diagramObject.Diagram:
    descr: A diagram object is part of a diagram
    inverseOf: diagram.DiagramElements
    kind: object
    label: Diagram
    range: Diagram
    rdfProp: cim:DiagramObject.Diagram
  diagramObject.DiagramObjectPoints:
    descr: 'A diagram object can have 0 or more points to reflect its layout position, routing (for polylines) or boundary (for polygons)'
    inverseOf: diagramObjectPoint.DiagramObject
    kind: object
    label: DiagramObjectPoints
    max: inf
    range: DiagramObjectPoint
    rdfProp: cim:DiagramObject.DiagramObjectPoints
  diagramObject.DiagramObjectStyle:
    descr: A diagram object has a style associated that provides a reference for the style used in the originating system
    inverseOf: diagramObjectStyle.StyledObjects
    kind: object
    label: DiagramObjectStyle
    range: DiagramObjectStyle
    rdfProp: cim:DiagramObject.DiagramObjectStyle
  diagramObject.IdentifiedObject:
    descr: The domain object to which this diagram object is associated
    inverseOf: identifiedObject.DiagramObjects
    kind: object
    label: IdentifiedObject
    range: IdentifiedObjectInterface
    rdfProp: cim:DiagramObject.IdentifiedObject
  diagramObject.rotation:
    descr: 'Sets the angle of rotation of the diagram object.  Zero degrees is pointing to the top of the diagram.  Rotation is clockwise.  DiagramObject.rotation=0 has the following meaning: The connection point of an element which has one terminal is pointing to the top side of the diagram. The connection point "From side" of an element which has more than one terminal is pointing to the top side of the diagram. DiagramObject.rotation=90 has the following meaning: The connection point of an element which has'
    kind: literal
    label: rotation
    range: double
    rdfProp: cim:DiagramObject.rotation
  diagramObjectPoint.DiagramObject:
    descr: The diagram object with which the points are associated
    inverseOf: diagramObject.DiagramObjectPoints
    kind: object
    label: DiagramObject
    range: DiagramObjectInterface
    rdfProp: cim:DiagramObjectPoint.DiagramObject
  diagramObjectPoint.sequenceNumber:
    descr: 'The sequence position of the point, used for defining the order of points for diagram objects acting as a polyline or polygon with more than one point. The attribute shall be a positive value'
    kind: literal
    label: sequenceNumber
    range: integer
    rdfProp: cim:DiagramObjectPoint.sequenceNumber
  diagramObjectPoint.xPosition:
    descr: The X coordinate of this point
    kind: literal
    label: xPosition
    range: double
    rdfProp: cim:DiagramObjectPoint.xPosition
  diagramObjectPoint.yPosition:
    descr: The Y coordinate of this point
    kind: literal
    label: yPosition
    range: double
    rdfProp: cim:DiagramObjectPoint.yPosition
  diagramObjectStyle.StyledObjects:
    descr: A style can be assigned to multiple diagram objects
    inverseOf: diagramObject.DiagramObjectStyle
    kind: object
    label: StyledObjects
    max: inf
    range: DiagramObjectInterface
    rdfProp: cim:DiagramObjectStyle.StyledObjects
  discrete.DiscreteValues:
    descr: The values connected to this measurement
    inverseOf: discreteValue.Discrete
    kind: object
    label: DiscreteValues
    max: inf
    range: DiscreteValue
    rdfProp: cim:Discrete.DiscreteValues
  discreteValue.Discrete:
    descr: Measurement to which this value is connected
    inverseOf: discrete.DiscreteValues
    kind: object
    label: Discrete
    range: Discrete
    rdfProp: cim:DiscreteValue.Discrete
  energyArea.ControlArea:
    descr: The control area specification that is used for the load forecast
    inverseOf: controlArea.EnergyArea
    kind: object
    label: ControlArea
    range: ControlArea
    rdfProp: cim:EnergyArea.ControlArea
  energyConsumer.LoadResponse:
    descr: 'The load response characteristic of this load.  If missing, this load is assumed to be constant power'
    inverseOf: loadResponseCharacteristic.EnergyConsumer
    kind: object
    label: LoadResponse
    range: LoadResponseCharacteristic
    rdfProp: cim:EnergyConsumer.LoadResponse
  energyConsumer.p:
    descr: |-
      Active power of the load. Load sign convention is used, i.e. positive sign means flow out from a node.
      For voltage dependent loads the value is at rated voltage.
      Starting value for a steady state solution
    kind: literal
    label: p
    range: double
    rdfProp: cim:EnergyConsumer.p
  energyConsumer.pfixed:
    descr: 'Active power of the load that is a fixed quantity and does not vary as load group value varies. Load sign convention is used, i.e. positive sign means flow out from a node'
    kind: literal
    label: pfixed
    range: double
    rdfProp: cim:EnergyConsumer.pfixed
  energyConsumer.pfixedPct:
    descr: 'Fixed active power as a percentage of load group fixed active power. Used to represent the time-varying components.  Load sign convention is used, i.e. positive sign means flow out from a node'
    kind: literal
    label: pfixedPct
    range: double
    rdfProp: cim:EnergyConsumer.pfixedPct
  energyConsumer.q:
    descr: |-
      Reactive power of the load. Load sign convention is used, i.e. positive sign means flow out from a node.
      For voltage dependent loads the value is at rated voltage.
      Starting value for a steady state solution
    kind: literal
    label: q
    range: double
    rdfProp: cim:EnergyConsumer.q
  energyConsumer.qfixed:
    descr: 'Reactive power of the load that is a fixed quantity and does not vary as load group value varies. Load sign convention is used, i.e. positive sign means flow out from a node'
    kind: literal
    label: qfixed
    range: double
    rdfProp: cim:EnergyConsumer.qfixed
  energyConsumer.qfixedPct:
    descr: 'Fixed reactive power as a percentage of load group fixed reactive power. Used to represent the time-varying components.  Load sign convention is used, i.e. positive sign means flow out from a node'
    kind: literal
    label: qfixedPct
    range: double
    rdfProp: cim:EnergyConsumer.qfixedPct
  equipment.ContingencyEquipment:
    descr: The contingency equipments in which this equipment participates
    inverseOf: contingencyEquipment.Equipment
    kind: object
    label: ContingencyEquipment
    max: inf
    range: ContingencyEquipment
    rdfProp: cim:Equipment.ContingencyEquipment
  equipment.EquipmentContainer:
    descr: Container of this equipment
    inverseOf: equipmentContainer.Equipments
    kind: object
    label: EquipmentContainer
    range: EquipmentContainerInterface
    rdfProp: cim:Equipment.EquipmentContainer
  equipment.aggregate:
    descr: The aggregate flag provides an alternative way of representing an aggregated (equivalent) element. It is applicable in cases when the dedicated classes for equivalent equipment do not have all of the attributes necessary to represent the required level of detail.  In case the flag is set to “true” the single instance of equipment represents multiple pieces of equipment that have been modelled together as an aggregate equivalent obtained by a network reduction procedure. Examples would be power transformers
    kind: literal
    label: aggregate
    range: boolean
    rdfProp: cim:Equipment.aggregate
  equipment.inService:
    descr: 'Specifies the availability of the equipment. True means the equipment is available for topology processing, which determines if the equipment is energized or not. False means that the equipment is treated by network applications as if it is not in the model'
    kind: literal
    label: inService
    range: boolean
    rdfProp: cim:Equipment.inService
  equipment.networkAnalysisEnabled:
    descr: 'The equipment is enabled to participate in network analysis.  If unspecified, the value is assumed to be true'
    kind: literal
    label: networkAnalysisEnabled
    range: boolean
    rdfProp: cim:Equipment.networkAnalysisEnabled
  equipment.normallyInService:
    descr: 'Specifies the availability of the equipment under normal operating conditions. True means the equipment is available for topology processing, which determines if the equipment is energized or not. False means that the equipment is treated by network applications as if it is not in the model'
    kind: literal
    label: normallyInService
    range: boolean
    rdfProp: cim:Equipment.normallyInService
  equipmentContainer.Equipments:
    descr: Contained equipment
    inverseOf: equipment.EquipmentContainer
    kind: object
    label: Equipments
    max: inf
    range: EquipmentInterface
    rdfProp: cim:EquipmentContainer.Equipments
  equivalentInjection.maxP:
    descr: Maximum active power of the injection
    kind: literal
    label: maxP
    range: double
    rdfProp: cim:EquivalentInjection.maxP
  equivalentInjection.maxQ:
    descr: Maximum reactive power of the injection.  Used for modelling of infeed for load flow exchange. Not used for short circuit modelling.  If maxQ and minQ are not used ReactiveCapabilityCurve can be used
    kind: literal
    label: maxQ
    range: double
    rdfProp: cim:EquivalentInjection.maxQ
  equivalentInjection.minP:
    descr: Minimum active power of the injection
    kind: literal
    label: minP
    range: double
    rdfProp: cim:EquivalentInjection.minP
  equivalentInjection.minQ:
    descr: Minimum reactive power of the injection.  Used for modelling of infeed for load flow exchange. Not used for short circuit modelling.  If maxQ and minQ are not used ReactiveCapabilityCurve can be used
    kind: literal
    label: minQ
    range: double
    rdfProp: cim:EquivalentInjection.minQ
  equivalentInjection.p:
    descr: |-
      Equivalent active power injection. Load sign convention is used, i.e. positive sign means flow out from a node.
      Starting value for steady state solutions
    kind: literal
    label: p
    range: double
    rdfProp: cim:EquivalentInjection.p
  equivalentInjection.q:
    descr: |-
      Equivalent reactive power injection. Load sign convention is used, i.e. positive sign means flow out from a node.
      Starting value for steady state solutions
    kind: literal
    label: q
    range: double
    rdfProp: cim:EquivalentInjection.q
  equivalentInjection.r:
    descr: |-
      Positive sequence resistance. Used to represent Extended-Ward (IEC 60909).
      Usage : Extended-Ward is a result of network reduction prior to the data exchange
    kind: literal
    label: r
    range: double
    rdfProp: cim:EquivalentInjection.r
  equivalentInjection.r0:
    descr: |-
      Zero sequence resistance. Used to represent Extended-Ward (IEC 60909).
      Usage : Extended-Ward is a result of network reduction prior to the data exchange
    kind: literal
    label: r0
    range: double
    rdfProp: cim:EquivalentInjection.r0
  equivalentInjection.regulationCapability:
    descr: Specifies whether or not the EquivalentInjection has the capability to regulate the local voltage. If true the EquivalentInjection can regulate. If false the EquivalentInjection cannot regulate. ReactiveCapabilityCurve can only be associated with EquivalentInjection  if the flag is true
    kind: literal
    label: regulationCapability
    range: boolean
    rdfProp: cim:EquivalentInjection.regulationCapability
  equivalentInjection.x:
    descr: |-
      Positive sequence reactance. Used to represent Extended-Ward (IEC 60909).
      Usage : Extended-Ward is a result of network reduction prior to the data exchange
    kind: literal
    label: x
    range: double
    rdfProp: cim:EquivalentInjection.x
  equivalentInjection.x0:
    descr: |-
      Zero sequence reactance. Used to represent Extended-Ward (IEC 60909).
      Usage : Extended-Ward is a result of network reduction prior to the data exchange
    kind: literal
    label: x0
    range: double
    rdfProp: cim:EquivalentInjection.x0
  eu:boundaryPoint.ConnectivityNode:
    descr: The connectivity node that is designated as a boundary point
    inverseOf: eu:connectivityNode.BoundaryPoint
    kind: object
    label: ConnectivityNode
    range: ConnectivityNode
    rdfProp: eu:BoundaryPoint.ConnectivityNode
  eu:boundaryPoint.fromEndIsoCode:
    descr: |-
      The ISO code of the region which the "From" side of the Boundary point belongs to or it is connected to.
      The ISO code is a two-character country code as defined by ISO 3166 (http://www.iso.org/iso/country_codes). The length of the string is 2 characters maximum
    kind: literal
    label: fromEndIsoCode
    range: string
    rdfProp: eu:BoundaryPoint.fromEndIsoCode
  eu:boundaryPoint.fromEndName:
    descr: |-
      A human readable name with length of the string 64 characters maximum. It covers the following two cases:
      -if the Boundary point is placed on a tie-line, it is the name (IdentifiedObject.name) of the substation at which the "From" side of the tie-line is connected to.
      -if the Boundary point is placed in a substation, it is the name (IdentifiedObject.name) of the element (e.g. PowerTransformer, ACLineSegment, Switch, etc.) at which the "From" side of the Boundary point is connected to
    kind: literal
    label: fromEndName
    range: string
    rdfProp: eu:BoundaryPoint.fromEndName
  eu:boundaryPoint.fromEndNameTso:
    descr: 'Identifies the name of the transmission system operator, distribution system operator or other entity at which the "From" side of the interconnection is connected to. The length of the string is 64 characters maximum'
    kind: literal
    label: fromEndNameTso
    range: string
    rdfProp: eu:BoundaryPoint.fromEndNameTso
  eu:boundaryPoint.toEndIsoCode:
    descr: |-
      The ISO code of the region which the "To" side of the Boundary point belongs to or is connected to.
      The ISO code is a two-character country code as defined by ISO 3166 (http://www.iso.org/iso/country_codes). The length of the string is 2 characters maximum
    kind: literal
    label: toEndIsoCode
    range: string
    rdfProp: eu:BoundaryPoint.toEndIsoCode
  eu:boundaryPoint.toEndName:
    descr: |-
      A human readable name with length of the string 64 characters maximum. It covers the following two cases:
      -if the Boundary point is placed on a tie-line, it is the name (IdentifiedObject.name) of the substation at which the "To" side of the tie-line is connected to.
      -if the Boundary point is placed in a substation, it is the name (IdentifiedObject.name) of the element (e.g. PowerTransformer, ACLineSegment, Switch, etc.) at which the "To" side of the Boundary point is connected to
    kind: literal
    label: toEndName
    range: string
    rdfProp: eu:BoundaryPoint.toEndName
  eu:boundaryPoint.toEndNameTso:
    descr: 'Identifies the name of the transmission system operator, distribution system operator or other entity at which the "To" side of the interconnection is connected to. The length of the string is 64 characters maximum'
    kind: literal
    label: toEndNameTso
    range: string
    rdfProp: eu:BoundaryPoint.toEndNameTso
  eu:connectivityNode.BoundaryPoint:
    descr: The boundary point associated with the connectivity node
    inverseOf: eu:boundaryPoint.ConnectivityNode
    kind: object
    label: BoundaryPoint
    range: eu:BoundaryPoint
    rdfProp: eu:ConnectivityNode.BoundaryPoint
  eu:identifiedObject.energyIdentCodeEic:
    descr: The attribute is used for an exchange of the EIC code (Energy identification Code). The length of the string is 16 characters as defined by the EIC code. For details on EIC scheme please refer to ENTSO-E web site
    kind: literal
    label: energyIdentCodeEic
    range: string
    rdfProp: eu:IdentifiedObject.energyIdentCodeEic
  eu:operationalLimitType.kind:
    descr: Types of limits defined in the ENTSO-E Operational Handbook Policy 3
    kind: object
    label: kind
    range: eu:LimitKind
    rdfProp: eu:OperationalLimitType.kind
  generatingUnit.ControlAreaGeneratingUnit:
    descr: ControlArea specifications for this generating unit
    inverseOf: controlAreaGeneratingUnit.GeneratingUnit
    kind: object
    label: ControlAreaGeneratingUnit
    max: inf
    range: ControlAreaGeneratingUnit
    rdfProp: cim:GeneratingUnit.ControlAreaGeneratingUnit
  generatingUnit.RotatingMachine:
    descr: A synchronous machine may operate as a generator and as such becomes a member of a generating unit
    inverseOf: rotatingMachine.GeneratingUnit
    kind: object
    label: RotatingMachine
    max: inf
    range: RotatingMachineInterface
    rdfProp: cim:GeneratingUnit.RotatingMachine
  generatingUnit.maxEconomicP:
    descr: 'Maximum high economic active power limit, that should not exceed the maximum operating active power limit'
    kind: literal
    label: maxEconomicP
    range: double
    rdfProp: cim:GeneratingUnit.maxEconomicP
  generatingUnit.maxOperatingP:
    descr: This is the maximum operating active power limit the dispatcher can enter for this unit
    kind: literal
    label: maxOperatingP
    range: double
    rdfProp: cim:GeneratingUnit.maxOperatingP
  generatingUnit.minEconomicP:
    descr: Low economic active power limit that shall be greater than or equal to the minimum operating active power limit
    kind: literal
    label: minEconomicP
    range: double
    rdfProp: cim:GeneratingUnit.minEconomicP
  generatingUnit.minOperatingP:
    descr: This is the minimum operating active power limit the dispatcher can enter for this unit
    kind: literal
    label: minOperatingP
    range: double
    rdfProp: cim:GeneratingUnit.minOperatingP
  generatingUnit.nominalP:
    descr: |-
      The nominal power of the generating unit.  Used to give precise meaning to percentage based attributes such as the governor speed change droop (governorSCD attribute).
      The attribute shall be a positive value equal to or less than RotatingMachine.ratedS
    kind: literal
    label: nominalP
    range: double
    rdfProp: cim:GeneratingUnit.nominalP
  generatingUnit.normalPF:
    descr: Generating unit economic participation factor.  The sum of the participation factors across generating units does not have to sum to one.  It is used for representing distributed slack participation factor. The attribute shall be a positive value or zero
    kind: literal
    label: normalPF
    range: double
    rdfProp: cim:GeneratingUnit.normalPF
  generatingUnit.ratedGrossMaxP:
    descr: |-
      The unit's gross rated maximum capacity (book value).
      The attribute shall be a positive value
    kind: literal
    label: ratedGrossMaxP
    range: double
    rdfProp: cim:GeneratingUnit.ratedGrossMaxP
  generatingUnit.ratedNetMaxP:
    descr: |-
      The net rated maximum capacity determined by subtracting the auxiliary power used to operate the internal plant machinery from the rated gross maximum capacity.
      The attribute shall be a positive value
    kind: literal
    label: ratedNetMaxP
    range: double
    rdfProp: cim:GeneratingUnit.ratedNetMaxP
  geographicalRegion.Regions:
    descr: All sub-geographical regions within this geographical region
    inverseOf: subGeographicalRegion.Region
    kind: object
    label: Regions
    max: inf
    range: SubGeographicalRegion
    rdfProp: cim:GeographicalRegion.Regions
  identifiedObject.DiagramObjects:
    descr: The diagram objects that are associated with the domain object
    inverseOf: diagramObject.IdentifiedObject
    kind: object
    label: DiagramObjects
    max: inf
    range: DiagramObjectInterface
    rdfProp: cim:IdentifiedObject.DiagramObjects
  identifiedObject.aliasName:
    descr: |-
      The aliasName is free text human readable name of the object alternative to IdentifiedObject.name. It may be non unique and may not correlate to a naming hierarchy.
      The attribute aliasName is retained because of backwards compatibility between CIM relases. It is however recommended to replace aliasName with the Name class as aliasName is planned for retirement at a future time
    kind: literal
    label: aliasName
    range: string
    rdfProp: cim:IdentifiedObject.aliasName
  identifiedObject.description:
    descr: The description is a free human readable text describing or naming the object. It may be non unique and may not correlate to a naming hierarchy
    kind: literal
    label: description
    range: string
    rdfProp: cim:IdentifiedObject.description
  identifiedObject.mRID:
    descr: |-
      Master resource identifier issued by a model authority. The mRID is unique within an exchange context. Global uniqueness is easily achieved by using a UUID, as specified in RFC 4122, for the mRID. The use of UUID is strongly recommended.
      For CIMXML data files in RDF syntax conforming to IEC 61970-552, the mRID is mapped to rdf:ID or rdf:about attributes that identify CIM object elements
    kind: literal
    label: mRID
    range: string
    rdfProp: cim:IdentifiedObject.mRID
  identifiedObject.name:
    descr: The name is any free human readable and possibly non unique text naming the object
    kind: literal
    label: name
    range: string
    rdfProp: cim:IdentifiedObject.name
  line.Region:
    descr: The sub-geographical region of the line
    inverseOf: subGeographicalRegion.Lines
    kind: object
    label: Region
    range: SubGeographicalRegion
    rdfProp: cim:Line.Region
  linearShuntCompensator.bPerSection:
    descr: Positive sequence shunt (charging) susceptance per section
    kind: literal
    label: bPerSection
    range: double
    rdfProp: cim:LinearShuntCompensator.bPerSection
  linearShuntCompensator.gPerSection:
    descr: Positive sequence shunt (charging) conductance per section
    kind: literal
    label: gPerSection
    range: double
    rdfProp: cim:LinearShuntCompensator.gPerSection
  loadArea.SubLoadAreas:
    descr: The SubLoadAreas in the LoadArea
    inverseOf: subLoadArea.LoadArea
    kind: object
    label: SubLoadAreas
    max: inf
    range: SubLoadArea
    rdfProp: cim:LoadArea.SubLoadAreas
  loadGroup.SubLoadArea:
    descr: The SubLoadArea where the Loadgroup belongs
    inverseOf: subLoadArea.LoadGroups
    kind: object
    label: SubLoadArea
    range: SubLoadArea
    rdfProp: cim:LoadGroup.SubLoadArea
  loadResponseCharacteristic.EnergyConsumer:
    descr: The set of loads that have the response characteristics
    inverseOf: energyConsumer.LoadResponse
    kind: object
    label: EnergyConsumer
    max: inf
    range: EnergyConsumerInterface
    rdfProp: cim:LoadResponseCharacteristic.EnergyConsumer
  loadResponseCharacteristic.exponentModel:
    descr: 'Indicates the exponential voltage dependency model is to be used. If false, the coefficient model is to be used. The exponential voltage dependency model consist of the attributes: - pVoltageExponent - qVoltageExponent - pFrequencyExponent - qFrequencyExponent. The coefficient model consist of the attributes: - pConstantImpedance - pConstantCurrent - pConstantPower - qConstantImpedance - qConstantCurrent - qConstantPower. The sum of pConstantImpedance, pConstantCurrent and pConstantPower shall equal'
    kind: literal
    label: exponentModel
    range: boolean
    rdfProp: cim:LoadResponseCharacteristic.exponentModel
  loadResponseCharacteristic.pConstantCurrent:
    descr: Portion of active power load modelled as constant current
    kind: literal
    label: pConstantCurrent
    range: double
    rdfProp: cim:LoadResponseCharacteristic.pConstantCurrent
  loadResponseCharacteristic.pConstantImpedance:
    descr: Portion of active power load modelled as constant impedance
    kind: literal
    label: pConstantImpedance
    range: double
    rdfProp: cim:LoadResponseCharacteristic.pConstantImpedance
  loadResponseCharacteristic.pConstantPower:
    descr: Portion of active power load modelled as constant power
    kind: literal
    label: pConstantPower
    range: double
    rdfProp: cim:LoadResponseCharacteristic.pConstantPower
  loadResponseCharacteristic.qConstantCurrent:
    descr: Portion of reactive power load modelled as constant current
    kind: literal
    label: qConstantCurrent
    range: double
    rdfProp: cim:LoadResponseCharacteristic.qConstantCurrent
  loadResponseCharacteristic.qConstantImpedance:
    descr: Portion of reactive power load modelled as constant impedance
    kind: literal
    label: qConstantImpedance
    range: double
    rdfProp: cim:LoadResponseCharacteristic.qConstantImpedance
  loadResponseCharacteristic.qConstantPower:
    descr: Portion of reactive power load modelled as constant power
    kind: literal
    label: qConstantPower
    range: double
    rdfProp: cim:LoadResponseCharacteristic.qConstantPower
  location.CoordinateSystem:
    descr: Coordinate system used to describe position points of this location
    inverseOf: coordinateSystem.Locations
    kind: object
    label: CoordinateSystem
    range: CoordinateSystem
    rdfProp: cim:Location.CoordinateSystem
  location.PowerSystemResources:
    descr: All power system resources at this location
    inverseOf: powerSystemResource.Location
    kind: object
    label: PowerSystemResources
    range: PowerSystemResourceInterface
    rdfProp: cim:Location.PowerSystemResources
  measurement.PowerSystemResource:
    descr: The power system resource that contains the measurement
    inverseOf: powerSystemResource.Measurements
    kind: object
    label: PowerSystemResource
    range: PowerSystemResourceInterface
    rdfProp: cim:Measurement.PowerSystemResource
  measurement.measurementType:
    descr: |-
      Specifies the type of measurement.  For example, this specifies if the measurement represents an indoor temperature, outdoor temperature, bus voltage, line flow, etc.
      When the measurementType is set to "Specialization", the type of Measurement is defined in more detail by the specialized class which inherits from Measurement
    kind: literal
    label: measurementType
    range: string
    rdfProp: cim:Measurement.measurementType
  measurement.phases:
    descr: |-
      Indicates to which phases the measurement applies and avoids the need to use 'measurementType' to also encode phase information (which would explode the types). The phase information in Measurement, along with 'measurementType' and 'phases' uniquely defines a Measurement for a device, based on normal network phase. Their meaning will not change when the computed energizing phasing is changed due to jumpers or other reasons.
      If the attribute is missing three phases (ABC) shall be assumed
    kind: object
    label: phases
    range: PhaseCode
    rdfProp: cim:Measurement.phases
  measurement.unitMultiplier:
    descr: The unit multiplier of the measured quantity
    kind: object
    label: unitMultiplier
    range: UnitMultiplier
    rdfProp: cim:Measurement.unitMultiplier
  measurement.unitSymbol:
    descr: The unit of measure of the measured quantity
    kind: object
    label: unitSymbol
    range: UnitSymbol
    rdfProp: cim:Measurement.unitSymbol
  measurementValue.MeasurementValueSource:
    descr: 'A reference to the type of source that updates the MeasurementValue, e.g. SCADA, CCLink, manual, etc. User conventions for the names of sources are contained in the introduction to IEC 61970-301'
    inverseOf: measurementValueSource.MeasurementValues
    kind: object
    label: MeasurementValueSource
    range: MeasurementValueSource
    rdfProp: cim:MeasurementValue.MeasurementValueSource
  measurementValue.sensorAccuracy:
    descr: 'The limit, expressed as a percentage of the sensor maximum, that errors will not exceed when the sensor is used under  reference conditions'
    kind: literal
    label: sensorAccuracy
    range: double
    rdfProp: cim:MeasurementValue.sensorAccuracy
  measurementValue.timeStamp:
    descr: The time when the value was last updated
    kind: literal
    label: timeStamp
    range: dateTime
    rdfProp: cim:MeasurementValue.timeStamp
  measurementValueSource.MeasurementValues:
    descr: The MeasurementValues updated by the source
    inverseOf: measurementValue.MeasurementValueSource
    kind: object
    label: MeasurementValues
    max: inf
    range: MeasurementValueInterface
    rdfProp: cim:MeasurementValueSource.MeasurementValues
  name.name:
    descr: Any free text that used as a name or alternative identifier of the object
    kind: literal
    label: name
    range: string
    rdfProp: cim:Name.name
  nameType.description:
    descr: Description of the name type
    kind: literal
    label: description
    range: string
    rdfProp: cim:NameType.description
  nameType.name:
    descr: Name of the name type
    kind: literal
    label: name
    range: string
    rdfProp: cim:NameType.name
  nc:baseTimeSeries.generatedAtTime:
    descr: The time this time series (entity) come to existents and available for use
    kind: literal
    label: generatedAtTime
    range: dateTime
    rdfProp: nc:BaseTimeSeries.generatedAtTime
  nc:baseTimeSeries.interpolationKind:
    descr: Kind of interpolation done between time point
    kind: object
    label: interpolationKind
    range: nc:TimeSeriesInterpolationKind
    rdfProp: nc:BaseTimeSeries.interpolationKind
  nc:baseTimeSeries.kind:
    descr: Kind of base time series
    kind: object
    label: kind
    range: nc:BaseTimeSeriesKind
    rdfProp: nc:BaseTimeSeries.kind
  nc:baseTimeSeries.percentile:
    descr: The percentile is a number where a certain percentage of scores/ranking/values of a sample fall below that number. This is a way for expressing uncertainty in the number provided
    kind: literal
    label: percentile
    range: integer
    rdfProp: nc:BaseTimeSeries.percentile
  nc:biddingZone.BiddingZoneBorderOne:
    descr: The primary side of the border
    inverseOf: nc:biddingZoneBorder.BiddingZoneOne
    kind: object
    label: BiddingZoneBorderOne
    max: inf
    range: nc:BiddingZoneBorder
    rdfProp: nc:BiddingZone.BiddingZoneBorderOne
  nc:biddingZone.BiddingZoneBorderTwo:
    descr: The secondary side of the border
    inverseOf: nc:biddingZoneBorder.BiddingZoneTwo
    kind: object
    label: BiddingZoneBorderTwo
    max: inf
    range: nc:BiddingZoneBorder
    rdfProp: nc:BiddingZone.BiddingZoneBorderTwo
  nc:biddingZone.SchedulingArea:
    descr: The scheduling area that has bidding zone
    inverseOf: nc:schedulingArea.BiddingZone
    kind: object
    label: SchedulingArea
    max: inf
    range: nc:SchedulingArea
    rdfProp: nc:BiddingZone.SchedulingArea
  nc:biddingZone.isTradeEnabled:
    descr: 'Identifies the mechanism for determining the energy price for a given bidding zone. If true, the bid and the offer is expected to be provided for the bidding zone to create the market price. If false,  other mechanism determines the price of energy for a given bidding zone, e.g. virtual bidding zone'
    kind: literal
    label: isTradeEnabled
    range: boolean
    rdfProp: nc:BiddingZone.isTradeEnabled
  nc:biddingZoneBorder.BiddingZoneOne:
    descr: The bidding zone for the primary side
    inverseOf: nc:biddingZone.BiddingZoneBorderOne
    kind: object
    label: BiddingZoneOne
    range: nc:BiddingZone
    rdfProp: nc:BiddingZoneBorder.BiddingZoneOne
  nc:biddingZoneBorder.BiddingZoneTwo:
    descr: The bidding zone for the secondary side
    inverseOf: nc:biddingZone.BiddingZoneBorderTwo
    kind: object
    label: BiddingZoneTwo
    range: nc:BiddingZone
    rdfProp: nc:BiddingZoneBorder.BiddingZoneTwo
  nc:circuit.CircuitShare:
    descr: The circuit share of the given power transfer corridor
    inverseOf: nc:circuitShare.Circuit
    kind: object
    label: CircuitShare
    max: inf
    range: nc:CircuitShare
    rdfProp: nc:Circuit.CircuitShare
  nc:circuit.positiveFlowIn:
    descr: 'True, if the positive value on the terminal shall be considered flow into the circuit. False, if the positive value on the terminal shall be considered flow out of the circuit'
    kind: literal
    label: positiveFlowIn
    range: boolean
    rdfProp: nc:Circuit.positiveFlowIn
  nc:circuitShare.Circuit:
    descr: The circuit that has a share of the power system corridor
    inverseOf: nc:circuit.CircuitShare
    kind: object
    label: Circuit
    range: nc:CircuitInterface
    rdfProp: nc:CircuitShare.Circuit
  nc:circuitShare.PowerTransferCorridor:
    descr: The power transfer corridor that has this circuit share
    inverseOf: nc:powerTransferCorridor.CircuitShare
    kind: object
    label: PowerTransferCorridor
    range: nc:PowerTransferCorridorInterface
    rdfProp: nc:CircuitShare.PowerTransferCorridor
  nc:circuitShare.contributionFactor:
    descr: |-
      Contribution factor for the circuit which is part of a power transfer corridor.
      The allowed value range is [0,100]
    kind: literal
    label: contributionFactor
    range: double
    rdfProp: nc:CircuitShare.contributionFactor
  nc:circuitShare.normalContributionFactor:
    descr: |-
      Normal contribution factor for the circuit which is part of a power transfer corridor.
      The allowed value range is [0,100]
    kind: literal
    label: normalContributionFactor
    range: double
    rdfProp: nc:CircuitShare.normalContributionFactor
  nc:contingency.EquipmentOperator:
    descr: System operator that is operating the equipment that is being run a contingency on
    inverseOf: nc:systemOperator.Contingency
    kind: object
    label: EquipmentOperator
    range: nc:SystemOperatorInterface
    rdfProp: nc:Contingency.EquipmentOperator
  nc:contingency.normalMustStudy:
    descr: Specifies the requirement of study the contingency under normal operating conditions. True means the contingency must be study in a normal scenario. False means that the contingency does not need to be included in the scenario. This is the default value if mustStudy is missing
    kind: literal
    label: normalMustStudy
    range: boolean
    rdfProp: nc:Contingency.normalMustStudy
  nc:contingency.normalProbability:
    descr: |-
      Normal probability of the occurrence of the contingency based on normal operational condition. The value is used as the default if the probability is missing.
      The allowed value range is [0,100]
    kind: literal
    label: normalProbability
    range: double
    rdfProp: nc:Contingency.normalProbability
  nc:contingency.probability:
    descr: |-
      The forecasted probability of the occurrence of the contingency based on the given operational condition, status of the equipment and the forecasted environment condition.
      The allowed value range is [0,100]
    kind: literal
    label: probability
    range: double
    rdfProp: nc:Contingency.probability
  nc:controlArea.SchedulingArea:
    descr: The scheduling area related to a control area
    inverseOf: nc:schedulingArea.ControlArea
    kind: object
    label: SchedulingArea
    max: inf
    range: nc:SchedulingArea
    rdfProp: nc:ControlArea.SchedulingArea
  nc:energyConsumer.LoadAction:
    descr: The action appled to an EnergyConsumer
    inverseOf: nc:loadAction.EnergyConsumer
    kind: object
    label: LoadAction
    max: inf
    range: nc:LoadAction
    rdfProp: nc:EnergyConsumer.LoadAction
  nc:equipment.InServiceAction:
    descr: Action that is applied to an equipment
    inverseOf: nc:inServiceAction.Equipment
    kind: object
    label: InServiceAction
    max: inf
    range: nc:InServiceAction
    rdfProp: nc:Equipment.InServiceAction
  nc:equipment.PinEquipment:
    descr: The pin that uses this input
    inverseOf: nc:pinEquipment.Equipment
    kind: object
    label: PinEquipment
    max: inf
    range: nc:PinEquipment
    rdfProp: nc:Equipment.PinEquipment
  nc:equipment.PinEquipmentTripping:
    descr: Pin equipment that is used as gate input
    inverseOf: nc:pinEquipmentTripping.Equipment
    kind: object
    label: PinEquipmentTripping
    max: inf
    range: nc:PinEquipmentTripping
    rdfProp: nc:Equipment.PinEquipmentTripping
  nc:gate.GateInputPin:
    descr: This is the input to the gate
    inverseOf: nc:gateInputPin.Gate
    kind: object
    label: GateInputPin
    max: inf
    range: nc:GateInputPinInterface
    rdfProp: nc:Gate.GateInputPin
  nc:gate.PinGate:
    descr: The pin for this gate output
    inverseOf: nc:pinGate.GateOutput
    kind: object
    label: PinGate
    max: inf
    range: nc:PinGate
    rdfProp: nc:Gate.PinGate
  nc:gate.StageTrigger:
    descr: The stage trigger associated with the gate trigger
    inverseOf: nc:stageTrigger.GateTrigger
    kind: object
    label: StageTrigger
    max: inf
    range: nc:StageTrigger
    rdfProp: nc:Gate.StageTrigger
  nc:gate.kind:
    descr: The logical operation of the gate
    kind: object
    label: kind
    range: nc:GateLogicKind
    rdfProp: nc:Gate.kind
  nc:gateInputPin.Gate:
    descr: The Gate that has this input
    inverseOf: nc:gate.GateInputPin
    kind: object
    label: Gate
    range: nc:Gate
    rdfProp: nc:GateInputPin.Gate
  nc:gateInputPin.logicKind:
    descr: The logical operator kind used for comparison
    kind: object
    label: logicKind
    range: nc:LogicalOperatorsKind
    rdfProp: nc:GateInputPin.logicKind
  nc:gateInputPin.negate:
    descr: Invert/negate the result of the comparison
    kind: literal
    label: negate
    range: boolean
    rdfProp: nc:GateInputPin.negate
  nc:gateInputPin.thresholdPercentage:
    descr: |-
      The threshold percentage that should be used for compare with the percentage change between input value and threshold value.
      The allowed value range is [0,100]
    kind: literal
    label: thresholdPercentage
    range: double
    rdfProp: nc:GateInputPin.thresholdPercentage
  nc:gateInputPin.thresholdValue:
    descr: The threshold value that should be used for compare with the input value
    kind: literal
    label: thresholdValue
    range: double
    rdfProp: nc:GateInputPin.thresholdValue
  nc:generatingUnit.ScheduleResource:
    descr: The schedule resource that has this generating unit
    inverseOf: nc:scheduleResource.GeneratingUnit
    kind: object
    label: ScheduleResource
    range: nc:ScheduleResource
    rdfProp: nc:GeneratingUnit.ScheduleResource
  nc:gridStateAlteration.GridStateAlterationCollection:
    descr: The collection that has a GridStateAlteration
    inverseOf: nc:gridStateAlterationCollection.GridStateAlteration
    kind: object
    label: GridStateAlterationCollection
    range: nc:GridStateAlterationCollection
    rdfProp: nc:GridStateAlteration.GridStateAlterationCollection
  nc:gridStateAlteration.PropertyReference:
    descr: The property reference for this grid state alteration
    inverseOf: nc:propertyReference.GridStateAlteration
    kind: object
    label: PropertyReference
    range: nc:PropertyReference
    rdfProp: nc:GridStateAlteration.PropertyReference
  nc:gridStateAlteration.RangeConstraint:
    descr: The range constraint associated with a given GridStateAlteration
    inverseOf: nc:rangeConstraint.GridStateAlteration
    kind: object
    label: RangeConstraint
    max: inf
    range: nc:RangeConstraintInterface
    rdfProp: nc:GridStateAlteration.RangeConstraint
  nc:gridStateAlteration.enabled:
    descr: The status of the GridStateAlteration set by an operation or by a signal resulting from a control action
    kind: literal
    label: enabled
    range: boolean
    rdfProp: nc:GridStateAlteration.enabled
  nc:gridStateAlteration.normalEnabled:
    descr: The default/normal value used when other active signal/values are missing
    kind: literal
    label: normalEnabled
    range: boolean
    rdfProp: nc:GridStateAlteration.normalEnabled
  nc:gridStateAlterationCollection.GridStateAlteration:
    descr: The GridStateAlteration that belongs to the collection
    inverseOf: nc:gridStateAlteration.GridStateAlterationCollection
    kind: object
    label: GridStateAlteration
    max: inf
    range: nc:GridStateAlterationInterface
    rdfProp: nc:GridStateAlterationCollection.GridStateAlteration
  nc:gridStateAlterationCollection.StageAction:
    descr: The stage action related to this GridStateAlterationCollection
    inverseOf: nc:stage.GridStateAlterationCollection
    kind: object
    label: StageAction
    max: inf
    range: nc:Stage
    rdfProp: nc:GridStateAlterationCollection.StageAction
  nc:inServiceAction.Equipment:
    descr: Equipment that has a in service action associated
    inverseOf: nc:equipment.InServiceAction
    kind: object
    label: Equipment
    range: EquipmentInterface
    rdfProp: nc:InServiceAction.Equipment
  nc:loadAction.EnergyConsumer:
    descr: The EnergyConsumer that is associated with a load action
    inverseOf: nc:energyConsumer.LoadAction
    kind: object
    label: EnergyConsumer
    range: EnergyConsumerInterface
    rdfProp: nc:LoadAction.EnergyConsumer
  nc:operationalLimit.PinOperationallLimit:
    descr: The operational limit pin pin that uses this operational limit
    inverseOf: nc:pinOperationalLimit.OperationalLimit
    kind: object
    label: PinOperationallLimit
    max: inf
    range: nc:PinOperationalLimit
    rdfProp: nc:OperationalLimit.PinOperationallLimit
  nc:operationalLimitSet.PowerTransferCorridor:
    descr: The power transfer corridor that has this operational limit set
    inverseOf: nc:powerTransferCorridor.OperationalLimitSet
    kind: object
    label: PowerTransferCorridor
    range: nc:PowerTransferCorridorInterface
    rdfProp: nc:OperationalLimitSet.PowerTransferCorridor
  nc:pinEquipment.Equipment:
    descr: The Equipment that is used in the input pin
    inverseOf: nc:equipment.PinEquipment
    kind: object
    label: Equipment
    range: EquipmentInterface
    rdfProp: nc:PinEquipment.Equipment
  nc:pinEquipment.PropertyReference:
    descr: The property reference for this pin equipment
    inverseOf: nc:propertyReference.PinEquipment
    kind: object
    label: PropertyReference
    range: nc:PropertyReference
    rdfProp: nc:PinEquipment.PropertyReference
  nc:pinEquipmentTripping.Equipment:
    descr: Equipment that is tripped
    inverseOf: nc:equipment.PinEquipmentTripping
    kind: object
    label: Equipment
    range: EquipmentInterface
    rdfProp: nc:PinEquipmentTripping.Equipment
  nc:pinGate.GateOutput:
    descr: The output of the gate
    inverseOf: nc:gate.PinGate
    kind: object
    label: GateOutput
    range: nc:Gate
    rdfProp: nc:PinGate.GateOutput
  nc:pinOperationalLimit.OperationalLimit:
    descr: The operational limit that is used in the input pin
    inverseOf: nc:operationalLimit.PinOperationallLimit
    kind: object
    label: OperationalLimit
    range: OperationalLimitInterface
    rdfProp: nc:PinOperationalLimit.OperationalLimit
  nc:pinTerminal.Terminal:
    descr: The Terminal that is used in the input pin
    inverseOf: nc:terminal.PinTerminal
    kind: object
    label: Terminal
    range: Terminal
    rdfProp: nc:PinTerminal.Terminal
  nc:pinTerminal.kind:
    descr: The kind of quantity which is used as an input value
    kind: object
    label: kind
    range: nc:PinTerminalKind
    rdfProp: nc:PinTerminal.kind
  nc:powerTransferCorridor.CircuitShare:
    descr: The circuit share for this power transfer corridor
    inverseOf: nc:circuitShare.PowerTransferCorridor
    kind: object
    label: CircuitShare
    max: inf
    range: nc:CircuitShare
    rdfProp: nc:PowerTransferCorridor.CircuitShare
  nc:powerTransferCorridor.OperationalLimitSet:
    descr: The operational limit set relevant for this power transfer corridor
    inverseOf: nc:operationalLimitSet.PowerTransferCorridor
    kind: object
    label: OperationalLimitSet
    max: inf
    range: OperationalLimitSet
    rdfProp: nc:PowerTransferCorridor.OperationalLimitSet
  nc:powerTransferCorridor.enabled:
    descr: It enables/disables the monitoring/assessment of a power transfer corridor. True means that the monitoring of the power transfer corridor is assessed. False means the power transfer corridor is not assessed
    kind: literal
    label: enabled
    range: boolean
    rdfProp: nc:PowerTransferCorridor.enabled
  nc:powerTransferCorridor.normalEnabled:
    descr: It is the normal enable/disable the monitoring/assessment of a power transfer corridor. True means that the monitoring of the power transfer corridor is assessed. False means the power transfer corridor is not assessed
    kind: literal
    label: normalEnabled
    range: boolean
    rdfProp: nc:PowerTransferCorridor.normalEnabled
  nc:propertyReference.GridStateAlteration:
    descr: The grid state alteration for this property reference
    inverseOf: nc:gridStateAlteration.PropertyReference
    kind: object
    label: GridStateAlteration
    max: inf
    range: nc:GridStateAlterationInterface
    rdfProp: nc:PropertyReference.GridStateAlteration
  nc:propertyReference.PinEquipment:
    descr: The pin equipment that has this property reference
    inverseOf: nc:pinEquipment.PropertyReference
    kind: object
    label: PinEquipment
    max: inf
    range: nc:PinEquipment
    rdfProp: nc:PropertyReference.PinEquipment
  nc:propertyReference.StaticPropertyRange:
    descr: Static property range that has this property reference
    inverseOf: nc:staticPropertyRange.PropertyReference
    kind: object
    label: StaticPropertyRange
    max: inf
    range: nc:StaticPropertyRange
    rdfProp: nc:PropertyReference.StaticPropertyRange
  nc:rangeConstraint.GridStateAlteration:
    descr: The grid state alteration which has static range
    inverseOf: nc:gridStateAlteration.RangeConstraint
    kind: object
    label: GridStateAlteration
    range: nc:GridStateAlterationInterface
    rdfProp: nc:RangeConstraint.GridStateAlteration
  nc:rangeConstraint.direction:
    descr: Defines the direction of the attribute value referenced by the PropertyReference
    kind: object
    label: direction
    range: nc:RelativeDirectionKind
    rdfProp: nc:RangeConstraint.direction
  nc:rangeConstraint.normalValue:
    descr: |-
      The normal (initial) value. The meaning of the value is defined by the attribute referenced by the PropertyReference. The value can be integer, float or boolean. In case of boolean 1 equals true and 0 equals false.
      If the valueKind is incremental or incrementalPercentage, then the value shall be positive (greater than zero).
      If the valueKind is incrementalPercentage, then the value shall be in the range [0, 100]
    kind: literal
    label: normalValue
    range: double
    rdfProp: nc:RangeConstraint.normalValue
  nc:rangeConstraint.value:
    descr: |-
      The value at the time. The meaning of the value is defined by the attribute referenced by the PropertyReference. The value can be integer, float or boolean. In case of boolean 1 equals true and 0 equals false. 
      If the valueKind is incremental or incrementalPercentage, then the value shall be positive (greater than zero).
      If the valueKind is incrementalPercentage, then the value shall be in the range [0, 100]
    kind: literal
    label: value
    range: double
    rdfProp: nc:RangeConstraint.value
  nc:rangeConstraint.valueKind:
    descr: Kind of value offset for the range that applies to the attribute referenced by the PropertyReference
    kind: object
    label: valueKind
    range: nc:ValueOffsetKind
    rdfProp: nc:RangeConstraint.valueKind
  nc:remedialActionScheme.Stage:
    descr: The stage for this remedial action scheme
    inverseOf: nc:stage.RemedialActionScheme
    kind: object
    label: Stage
    max: inf
    range: nc:Stage
    rdfProp: nc:RemedialActionScheme.Stage
  nc:remedialActionScheme.armed:
    descr: Defines the arming status of the remedial action scheme. It is set by operation or by signal
    kind: literal
    label: armed
    range: boolean
    rdfProp: nc:RemedialActionScheme.armed
  nc:remedialActionScheme.inService:
    descr: 'Specifies the availability of the Remedial Action Scheme (RAS). If true, the RAS is available for contingency processing. If false, the RAS is treated by contingency processing as if it is not in the model'
    kind: literal
    label: inService
    range: boolean
    rdfProp: nc:RemedialActionScheme.inService
  nc:remedialActionScheme.kind:
    descr: Kind of Remedial Action Scheme
    kind: object
    label: kind
    range: nc:RemedialActionSchemeKind
    rdfProp: nc:RemedialActionScheme.kind
  nc:remedialActionScheme.normalArmed:
    descr: Defines the normal arming status of the remedial action scheme
    kind: literal
    label: normalArmed
    range: boolean
    rdfProp: nc:RemedialActionScheme.normalArmed
  nc:rotatingMachine.RotatingMachineAction:
    descr: The action applied to a rotating machine
    inverseOf: nc:rotatingMachineAction.RotatingMachine
    kind: object
    label: RotatingMachineAction
    max: inf
    range: nc:RotatingMachineAction
    rdfProp: nc:RotatingMachine.RotatingMachineAction
  nc:rotatingMachineAction.RotatingMachine:
    descr: The rotating machine that has an action
    inverseOf: nc:rotatingMachine.RotatingMachineAction
    kind: object
    label: RotatingMachine
    range: RotatingMachineInterface
    rdfProp: nc:RotatingMachineAction.RotatingMachine
  nc:scheduleResource.GeneratingUnit:
    descr: The generating unit that relates to this schedule resource
    inverseOf: nc:generatingUnit.ScheduleResource
    kind: object
    label: GeneratingUnit
    max: inf
    range: GeneratingUnit
    rdfProp: nc:ScheduleResource.GeneratingUnit
  nc:schedulingArea.BiddingZone:
    descr: The bidding zone related to this scheduling area
    inverseOf: nc:biddingZone.SchedulingArea
    kind: object
    label: BiddingZone
    range: nc:BiddingZone
    rdfProp: nc:SchedulingArea.BiddingZone
  nc:schedulingArea.ControlArea:
    descr: The control area for this scheduling area
    inverseOf: nc:controlArea.SchedulingArea
    kind: object
    label: ControlArea
    range: ControlArea
    rdfProp: nc:SchedulingArea.ControlArea
  nc:schedulingArea.SynchronousArea:
    descr: The synchronous are that has this scheduling area
    inverseOf: nc:synchronousArea.SchedulingArea
    kind: object
    label: SynchronousArea
    range: nc:SynchronousArea
    rdfProp: nc:SchedulingArea.SynchronousArea
  nc:schedulingArea.normalParticipationFactor:
    descr: 'Normal participation factor describing the entity part of the active power provided by a collection of entities (e.g. an active power forecast to a collection of entities is divided to each of the member entity according to the participation factor). Must be a positive value. In the case of a sharing strategy, the distribution is following entities value (V) equals aggregated value (T) divided by sum of participation factors (PF), i.e. V=T/sum(PF).  In the case of priority strategy, the item with'
    kind: literal
    label: normalParticipationFactor
    range: double
    rdfProp: nc:SchedulingArea.normalParticipationFactor
  nc:schedulingArea.participationFactor:
    descr: 'Participation factor describing the entity part of the active power provided by a collection of entities (e.g. an active power forecast to a collection of entities is divided to each of the member entity according to the participation factor). Must be a positive value. In the case of a sharing strategy, the distribution is following entities value (V) equals aggregated value (T) divided by sum of participation factors (PF), i.e. V=T/sum(PF).  In the case of priority strategy, the item with the lowest'
    kind: literal
    label: participationFactor
    range: double
    rdfProp: nc:SchedulingArea.participationFactor
  nc:stage.GridStateAlterationCollection:
    descr: The GridStateAlterationCollection which belongs to the Stage
    inverseOf: nc:gridStateAlterationCollection.StageAction
    kind: object
    label: GridStateAlterationCollection
    range: nc:GridStateAlterationCollection
    rdfProp: nc:Stage.GridStateAlterationCollection
  nc:stage.RemedialActionScheme:
    descr: The remedial action scheme that has a stage
    inverseOf: nc:remedialActionScheme.Stage
    kind: object
    label: RemedialActionScheme
    range: nc:RemedialActionScheme
    rdfProp: nc:Stage.RemedialActionScheme
  nc:stage.StageTrigger:
    descr: The state trigger that is part of this stage
    inverseOf: nc:stageTrigger.Stage
    kind: object
    label: StageTrigger
    max: inf
    range: nc:StageTrigger
    rdfProp: nc:Stage.StageTrigger
  nc:stage.priority:
    descr: The priority of the stage.   0 = do not care (default) 1 = highest priority. 2 is less than 1 and so on. A stage with higher priority needs be activated before a lower stage can be activated
    kind: literal
    label: priority
    range: integer
    rdfProp: nc:Stage.priority
  nc:stageTrigger.GateTrigger:
    descr: The gate that is the input pin which triggers the protective reactions
    inverseOf: nc:gate.StageTrigger
    kind: object
    label: GateTrigger
    range: nc:Gate
    rdfProp: nc:StageTrigger.GateTrigger
  nc:stageTrigger.Stage:
    descr: The stage that has this stage trigger
    inverseOf: nc:stage.StageTrigger
    kind: object
    label: Stage
    range: nc:Stage
    rdfProp: nc:StageTrigger.Stage
  nc:stageTrigger.armed:
    descr: The status of the class set by operation or by signal. Optional field that will override other status fields
    kind: literal
    label: armed
    range: boolean
    rdfProp: nc:StageTrigger.armed
  nc:stageTrigger.inService:
    descr: Indicates if the stage trigger is in service
    kind: literal
    label: inService
    range: boolean
    rdfProp: nc:StageTrigger.inService
  nc:stageTrigger.normalArmed:
    descr: The default/normal value used when other active signal/values are missing
    kind: literal
    label: normalArmed
    range: boolean
    rdfProp: nc:StageTrigger.normalArmed
  nc:stageTrigger.priority:
    descr: Priority of trigger. 0 = don t care (default) 1 = highest priority. 2 is less than 1 and so on. A trigger with the highest priority will trigger first
    kind: literal
    label: priority
    range: integer
    rdfProp: nc:StageTrigger.priority
  nc:staticPropertyRange.PropertyReference:
    descr: Property reference for this static property range
    inverseOf: nc:propertyReference.StaticPropertyRange
    kind: object
    label: PropertyReference
    range: nc:PropertyReference
    rdfProp: nc:StaticPropertyRange.PropertyReference
  nc:switch.TopologyAction:
    descr: The action assigned to a switch
    inverseOf: nc:topologyAction.Switch
    kind: object
    label: TopologyAction
    max: inf
    range: nc:TopologyAction
    rdfProp: nc:Switch.TopologyAction
  nc:synchronousArea.SchedulingArea:
    descr: The scheduling area that is part of this synchronous area
    inverseOf: nc:schedulingArea.SynchronousArea
    kind: object
    label: SchedulingArea
    max: inf
    range: nc:SchedulingArea
    rdfProp: nc:SynchronousArea.SchedulingArea
  nc:synchronousArea.nominalFrequency:
    descr: 'The nominal frequency for the Synchronous Area, e.g. 50 Hz for Europe'
    kind: literal
    label: nominalFrequency
    range: double
    rdfProp: nc:SynchronousArea.nominalFrequency
  nc:systemOperator.Contingency:
    descr: Contingency for the equipment that is operated by the system operator
    inverseOf: nc:contingency.EquipmentOperator
    kind: object
    label: Contingency
    max: inf
    range: ContingencyInterface
    rdfProp: nc:SystemOperator.Contingency
  nc:terminal.PinTerminal:
    descr: The pin that uses this input
    inverseOf: nc:pinTerminal.Terminal
    kind: object
    label: PinTerminal
    max: inf
    range: nc:PinTerminal
    rdfProp: nc:Terminal.PinTerminal
  nc:topologyAction.Switch:
    descr: The switch that has a topology action associated
    inverseOf: nc:switch.TopologyAction
    kind: object
    label: Switch
    range: SwitchInterface
    rdfProp: nc:TopologyAction.Switch
  nonConformLoad.LoadGroup:
    descr: Group of this ConformLoad
    inverseOf: nonConformLoadGroup.EnergyConsumers
    kind: object
    label: LoadGroup
    range: NonConformLoadGroup
    rdfProp: cim:NonConformLoad.LoadGroup
  nonConformLoadGroup.EnergyConsumers:
    descr: Conform loads assigned to this ConformLoadGroup
    inverseOf: nonConformLoad.LoadGroup
    kind: object
    label: EnergyConsumers
    max: inf
    range: NonConformLoad
    rdfProp: cim:NonConformLoadGroup.EnergyConsumers
  operationalLimit.OperationalLimitSet:
    descr: The limit set to which the limit values belong
    inverseOf: operationalLimitSet.OperationalLimitValue
    kind: object
    label: OperationalLimitSet
    range: OperationalLimitSet
    rdfProp: cim:OperationalLimit.OperationalLimitSet
  operationalLimit.OperationalLimitType:
    descr: The limit type associated with this limit
    inverseOf: operationalLimitType.OperationalLimit
    kind: object
    label: OperationalLimitType
    range: OperationalLimitType
    rdfProp: cim:OperationalLimit.OperationalLimitType
  operationalLimitSet.OperationalLimitValue:
    descr: Values of equipment limits
    inverseOf: operationalLimit.OperationalLimitSet
    kind: object
    label: OperationalLimitValue
    max: inf
    range: OperationalLimitInterface
    rdfProp: cim:OperationalLimitSet.OperationalLimitValue
  operationalLimitSet.Terminal:
    descr: The terminal where the operational limit set apply
    inverseOf: aCDCTerminal.OperationalLimitSet
    kind: object
    label: Terminal
    range: ACDCTerminalInterface
    rdfProp: cim:OperationalLimitSet.Terminal
  operationalLimitType.OperationalLimit:
    descr: The operational limits associated with this type of limit
    inverseOf: operationalLimit.OperationalLimitType
    kind: object
    label: OperationalLimit
    max: inf
    range: OperationalLimitInterface
    rdfProp: cim:OperationalLimitType.OperationalLimit
  operationalLimitType.acceptableDuration:
    descr: 'The nominal acceptable duration of the limit. Limits are commonly expressed in terms of the time limit for which the limit is normally acceptable. The actual acceptable duration of a specific limit may depend on other local factors such as temperature or wind speed. The attribute has meaning only if the flag isInfiniteDuration is set to false, hence it shall not be exchanged when isInfiniteDuration is set to true'
    kind: literal
    label: acceptableDuration
    range: double
    rdfProp: cim:OperationalLimitType.acceptableDuration
  operationalLimitType.direction:
    descr: The direction of the limit
    kind: object
    label: direction
    range: OperationalLimitDirectionKind
    rdfProp: cim:OperationalLimitType.direction
  operationalLimitType.isInfiniteDuration:
    descr: 'Defines if the operational limit type has infinite duration. If true, the limit has infinite duration. If false, the limit has definite duration which is defined by the attribute acceptableDuration'
    kind: literal
    label: isInfiniteDuration
    range: boolean
    rdfProp: cim:OperationalLimitType.isInfiniteDuration
  organisation.Roles:
    descr: All roles of this organisation
    inverseOf: organisationRole.Organisation
    kind: object
    label: Roles
    max: inf
    range: OrganisationRoleInterface
    rdfProp: cim:Organisation.Roles
  organisationRole.Organisation:
    descr: Organisation having this role
    inverseOf: organisation.Roles
    kind: object
    label: Organisation
    range: Organisation
    rdfProp: cim:OrganisationRole.Organisation
  powerSystemResource.Location:
    descr: Location of this power system resource
    inverseOf: location.PowerSystemResources
    kind: object
    label: Location
    range: Location
    rdfProp: cim:PowerSystemResource.Location
  powerSystemResource.Measurements:
    descr: The measurements associated with this power system resource
    inverseOf: measurement.PowerSystemResource
    kind: object
    label: Measurements
    max: inf
    range: MeasurementInterface
    rdfProp: cim:PowerSystemResource.Measurements
  powerTransformer.PowerTransformerEnd:
    descr: The ends of this power transformer
    inverseOf: powerTransformerEnd.PowerTransformer
    kind: object
    label: PowerTransformerEnd
    max: inf
    range: PowerTransformerEnd
    rdfProp: cim:PowerTransformer.PowerTransformerEnd
  powerTransformer.isPartOfGeneratorUnit:
    descr: 'Indicates whether the machine is part of a power station unit. Used for short circuit data exchange according to IEC 60909.  It has an impact on how the correction factors are calculated for transformers, since the transformer is not necessarily part of a synchronous machine and generating unit. It is not always possible to derive this information from the model. This is why the attribute is necessary'
    kind: literal
    label: isPartOfGeneratorUnit
    range: boolean
    rdfProp: cim:PowerTransformer.isPartOfGeneratorUnit
  powerTransformerEnd.PowerTransformer:
    descr: The power transformer of this power transformer end
    inverseOf: powerTransformer.PowerTransformerEnd
    kind: object
    label: PowerTransformer
    range: PowerTransformer
    rdfProp: cim:PowerTransformerEnd.PowerTransformer
  powerTransformerEnd.b:
    descr: Magnetizing branch susceptance (B mag).  The value can be positive or negative
    kind: literal
    label: b
    range: double
    rdfProp: cim:PowerTransformerEnd.b
  powerTransformerEnd.connectionKind:
    descr: Kind of connection
    kind: object
    label: connectionKind
    range: WindingConnection
    rdfProp: cim:PowerTransformerEnd.connectionKind
  powerTransformerEnd.g:
    descr: Magnetizing branch conductance
    kind: literal
    label: g
    range: double
    rdfProp: cim:PowerTransformerEnd.g
  powerTransformerEnd.r:
    descr: |-
      Resistance (star-model) of the transformer end.
      The attribute shall be equal to or greater than zero for non-equivalent transformers
    kind: literal
    label: r
    range: double
    rdfProp: cim:PowerTransformerEnd.r
  powerTransformerEnd.ratedS:
    descr: |-
      Normal apparent power rating.
      The attribute shall be a positive value. For a two-winding transformer the values for the high and low voltage sides shall be identical
    kind: literal
    label: ratedS
    range: double
    rdfProp: cim:PowerTransformerEnd.ratedS
  powerTransformerEnd.ratedU:
    descr: |-
      Rated voltage: phase-phase for three-phase windings, and either phase-phase or phase-neutral for single-phase windings.
      A high voltage side, as given by TransformerEnd.endNumber, shall have a ratedU that is greater than or equal to ratedU for the lower voltage sides.
      The attribute shall be a positive value
    kind: literal
    label: ratedU
    range: double
    rdfProp: cim:PowerTransformerEnd.ratedU
  powerTransformerEnd.x:
    descr: Positive sequence series reactance (star-model) of the transformer end
    kind: literal
    label: x
    range: double
    rdfProp: cim:PowerTransformerEnd.x
  prov:entity:
    descr: The entity that generated by this activity
    inverseOf: prov:wasGeneratedBy
    kind: object
    label: Entity
    max: inf
    range: dcat:Dataset
    rdfProp: prov:Entity
  prov:generatedAtTime:
    descr: |-
      Generation is the completion of production of a new entity by an activity. This entity did not exist before generation and becomes available for usage after this generation.
      [CIM context:
      The date and time when the model was serialized in the document where the header is located. The format is an extended format according to the ISO 8601-2005. European exchanges shall refer to UTC.]
    kind: literal
    label: generatedAtTime
    range: dateTime
    rdfProp: prov:generatedAtTime
  prov:wasGeneratedBy:
    descr: |-
      Generation is the completion of production of a new entity by an activity. This entity did not exist before generation and becomes available for usage after this generation.
      [CIM context:
      Reference to an activity or the exact business nature (process, configuration) which produced or uses the model.]
    inverseOf: prov:entity
    kind: object
    label: wasGeneratedBy
    range: dcat:Dataset
    rdfProp: prov:wasGeneratedBy
  ratioTapChanger.TransformerEnd:
    descr: Transformer end to which this ratio tap changer belongs
    inverseOf: transformerEnd.RatioTapChanger
    kind: object
    label: TransformerEnd
    range: TransformerEndInterface
    rdfProp: cim:RatioTapChanger.TransformerEnd
  ratioTapChanger.stepVoltageIncrement:
    descr: |-
      Tap step increment, in per cent of rated voltage of the power transformer end, per step position.
      When the increment is negative, the voltage decreases when the tap step increases
    kind: literal
    label: stepVoltageIncrement
    range: double
    rdfProp: cim:RatioTapChanger.stepVoltageIncrement
  regulatingCondEq.RegulatingControl:
    descr: The regulating control scheme in which this equipment participates
    inverseOf: regulatingControl.RegulatingCondEq
    kind: object
    label: RegulatingControl
    range: RegulatingControlInterface
    rdfProp: cim:RegulatingCondEq.RegulatingControl
  regulatingCondEq.controlEnabled:
    descr: 'Specifies the regulation status of the equipment.  True is regulating, false is not regulating'
    kind: literal
    label: controlEnabled
    range: boolean
    rdfProp: cim:RegulatingCondEq.controlEnabled
  regulatingControl.RegulatingCondEq:
    descr: The equipment that participates in this regulating control scheme
    inverseOf: regulatingCondEq.RegulatingControl
    kind: object
    label: RegulatingCondEq
    max: inf
    range: RegulatingCondEqInterface
    rdfProp: cim:RegulatingControl.RegulatingCondEq
  regulatingControl.Terminal:
    descr: 'The terminal associated with this regulating control.  The terminal is associated instead of a node, since the terminal could connect into either a topological node or a connectivity node.  Sometimes it is useful to model regulation at a terminal of a bus bar object'
    inverseOf: terminal.RegulatingControl
    kind: object
    label: Terminal
    range: Terminal
    rdfProp: cim:RegulatingControl.Terminal
  regulatingControl.discrete:
    descr: 'The regulation is performed in a discrete mode. This applies to equipment with discrete controls, e.g. tap changers and shunt compensators'
    kind: literal
    label: discrete
    range: boolean
    rdfProp: cim:RegulatingControl.discrete
  regulatingControl.enabled:
    descr: The flag tells if regulation is enabled
    kind: literal
    label: enabled
    range: boolean
    rdfProp: cim:RegulatingControl.enabled
  regulatingControl.mode:
    descr: The regulating control mode presently available.  This specification allows for determining the kind of regulation without need for obtaining the units from a schedule
    kind: object
    label: mode
    range: RegulatingControlModeKind
    rdfProp: cim:RegulatingControl.mode
  regulatingControl.targetDeadband:
    descr: |-
      This is a deadband used with discrete control to avoid excessive update of controls like tap changers and shunt compensator banks while regulating.  The units of those appropriate for the mode. The attribute shall be a positive value or zero. If RegulatingControl.discrete is set to "false", the RegulatingControl.targetDeadband is to be ignored.
      Note that for instance, if the targetValue is 100 kV and the targetDeadband is 2 kV the range is from 99 to 101 kV
    kind: literal
    label: targetDeadband
    range: double
    rdfProp: cim:RegulatingControl.targetDeadband
  regulatingControl.targetValue:
    descr: The target value specified for case input.   This value can be used for the target value without the use of schedules. The value has the units appropriate to the mode attribute
    kind: literal
    label: targetValue
    range: double
    rdfProp: cim:RegulatingControl.targetValue
  regulatingControl.targetValueUnitMultiplier:
    descr: Specify the multiplier for used for the targetValue
    kind: object
    label: targetValueUnitMultiplier
    range: UnitMultiplier
    rdfProp: cim:RegulatingControl.targetValueUnitMultiplier
  rotatingMachine.GeneratingUnit:
    descr: A synchronous machine may operate as a generator and as such becomes a member of a generating unit
    inverseOf: generatingUnit.RotatingMachine
    kind: object
    label: GeneratingUnit
    range: GeneratingUnit
    rdfProp: cim:RotatingMachine.GeneratingUnit
  rotatingMachine.p:
    descr: |-
      Active power injection. Load sign convention is used, i.e. positive sign means flow out from a node.
      Starting value for a steady state solution
    kind: literal
    label: p
    range: double
    rdfProp: cim:RotatingMachine.p
  rotatingMachine.q:
    descr: |-
      Reactive power injection. Load sign convention is used, i.e. positive sign means flow out from a node.
      Starting value for a steady state solution
    kind: literal
    label: q
    range: double
    rdfProp: cim:RotatingMachine.q
  rotatingMachine.ratedS:
    descr: |-
      Nameplate apparent power rating for the unit.
      The attribute shall have a positive value
    kind: literal
    label: ratedS
    range: double
    rdfProp: cim:RotatingMachine.ratedS
  shuntCompensator.SvShuntCompensatorSections:
    descr: The state for the number of shunt compensator sections in service
    inverseOf: svShuntCompensatorSections.ShuntCompensator
    kind: object
    label: SvShuntCompensatorSections
    range: SvShuntCompensatorSections
    rdfProp: cim:ShuntCompensator.SvShuntCompensatorSections
  shuntCompensator.aVRDelay:
    descr: An automatic voltage regulation delay (AVRDelay) which is the time delay from a change in voltage to when the capacitor is allowed to change state. This filters out temporary changes in voltage
    kind: literal
    label: aVRDelay
    range: double
    rdfProp: cim:ShuntCompensator.aVRDelay
  shuntCompensator.maximumSections:
    descr: The maximum number of sections that may be switched in
    kind: literal
    label: maximumSections
    range: integer
    rdfProp: cim:ShuntCompensator.maximumSections
  shuntCompensator.nomU:
    descr: The voltage at which the nominal reactive power may be calculated. This should normally be within 10% of the voltage at which the capacitor is connected to the network
    kind: literal
    label: nomU
    range: double
    rdfProp: cim:ShuntCompensator.nomU
  shuntCompensator.normalSections:
    descr: The normal number of sections switched in. The value shall be between zero and ShuntCompensator.maximumSections
    kind: literal
    label: normalSections
    range: integer
    rdfProp: cim:ShuntCompensator.normalSections
  shuntCompensator.sections:
    descr: 'Shunt compensator sections in use. Starting value for steady state solution. The attribute shall be a positive value or zero. Non integer values are allowed to support continuous variables. The reasons for continuous value are to support study cases where no discrete shunt compensators has yet been designed, a solutions where a narrow voltage band force the sections to oscillate or accommodate for a continuous solution as input.  For LinearShuntConpensator the value shall be between zero and ShuntCompensator.maximumSections'
    kind: literal
    label: sections
    range: double
    rdfProp: cim:ShuntCompensator.sections
  subGeographicalRegion.Lines:
    descr: The lines within the sub-geographical region
    inverseOf: line.Region
    kind: object
    label: Lines
    max: inf
    range: Line
    rdfProp: cim:SubGeographicalRegion.Lines
  subGeographicalRegion.Region:
    descr: The geographical region which this sub-geographical region is within
    inverseOf: geographicalRegion.Regions
    kind: object
    label: Region
    range: GeographicalRegion
    rdfProp: cim:SubGeographicalRegion.Region
  subGeographicalRegion.Substations:
    descr: The substations in this sub-geographical region
    inverseOf: substation.Region
    kind: object
    label: Substations
    max: inf
    range: Substation
    rdfProp: cim:SubGeographicalRegion.Substations
  subLoadArea.LoadArea:
    descr: The LoadArea where the SubLoadArea belongs
    inverseOf: loadArea.SubLoadAreas
    kind: object
    label: LoadArea
    range: LoadArea
    rdfProp: cim:SubLoadArea.LoadArea
  subLoadArea.LoadGroups:
    descr: The Loadgroups in the SubLoadArea
    inverseOf: loadGroup.SubLoadArea
    kind: object
    label: LoadGroups
    max: inf
    range: LoadGroupInterface
    rdfProp: cim:SubLoadArea.LoadGroups
  substation.Region:
    descr: The SubGeographicalRegion containing the substation
    inverseOf: subGeographicalRegion.Substations
    kind: object
    label: Region
    range: SubGeographicalRegion
    rdfProp: cim:Substation.Region
  substation.VoltageLevels:
    descr: The voltage levels within this substation
    inverseOf: voltageLevel.Substation
    kind: object
    label: VoltageLevels
    max: inf
    range: VoltageLevel
    rdfProp: cim:Substation.VoltageLevels
  svPowerFlow.Terminal:
    descr: The terminal associated with the power flow state variable
    inverseOf: terminal.SvPowerFlow
    kind: object
    label: Terminal
    range: Terminal
    rdfProp: cim:SvPowerFlow.Terminal
  svPowerFlow.p:
    descr: 'The active power flow. Load sign convention is used, i.e. positive sign means flow out from a TopologicalNode (bus) into the conducting equipment'
    kind: literal
    label: p
    range: double
    rdfProp: cim:SvPowerFlow.p
  svPowerFlow.q:
    descr: 'The reactive power flow. Load sign convention is used, i.e. positive sign means flow out from a TopologicalNode (bus) into the conducting equipment'
    kind: literal
    label: q
    range: double
    rdfProp: cim:SvPowerFlow.q
  svShuntCompensatorSections.ShuntCompensator:
    descr: The shunt compensator for which the state applies
    inverseOf: shuntCompensator.SvShuntCompensatorSections
    kind: object
    label: ShuntCompensator
    range: ShuntCompensatorInterface
    rdfProp: cim:SvShuntCompensatorSections.ShuntCompensator
  svShuntCompensatorSections.sections:
    descr: The number of sections in service as a continuous variable. The attribute shall be a positive value or zero. To get integer value scale with ShuntCompensator.bPerSection
    kind: literal
    label: sections
    range: double
    rdfProp: cim:SvShuntCompensatorSections.sections
  svStatus.ConductingEquipment:
    descr: The conducting equipment associated with the status state variable
    inverseOf: conductingEquipment.SvStatus
    kind: object
    label: ConductingEquipment
    range: ConductingEquipmentInterface
    rdfProp: cim:SvStatus.ConductingEquipment
  svStatus.inService:
    descr: The in service status as a result of topology processing.  It indicates if the equipment is considered as energized by the power flow. It reflects if the equipment is connected within a solvable island.  It does not necessarily reflect whether or not the island was solved by the power flow
    kind: literal
    label: inService
    range: boolean
    rdfProp: cim:SvStatus.inService
  svSwitch.Switch:
    descr: The switch associated with the switch state
    inverseOf: switch.SvSwitch
    kind: object
    label: Switch
    range: SwitchInterface
    rdfProp: cim:SvSwitch.Switch
  svSwitch.open:
    descr: The attribute tells if the computed state of the switch is considered open
    kind: literal
    label: open
    range: boolean
    rdfProp: cim:SvSwitch.open
  svTapStep.TapChanger:
    descr: The tap changer associated with the tap step state
    inverseOf: tapChanger.SvTapStep
    kind: object
    label: TapChanger
    range: TapChangerInterface
    rdfProp: cim:SvTapStep.TapChanger
  svTapStep.position:
    descr: 'The floating point tap position.   This is not the tap ratio, but rather the tap step position as defined by the related tap changer model and normally is constrained to be within the range of minimum and maximum tap positions'
    kind: literal
    label: position
    range: double
    rdfProp: cim:SvTapStep.position
  svVoltage.TopologicalNode:
    descr: The topological node associated with the voltage state
    inverseOf: topologicalNode.SvVoltage
    kind: object
    label: TopologicalNode
    range: TopologicalNode
    rdfProp: cim:SvVoltage.TopologicalNode
  svVoltage.angle:
    descr: The voltage angle of the topological node complex voltage with respect to system reference
    kind: literal
    label: angle
    range: double
    rdfProp: cim:SvVoltage.angle
  svVoltage.v:
    descr: The voltage magnitude at the topological node. The attribute shall be a positive value
    kind: literal
    label: v
    range: double
    rdfProp: cim:SvVoltage.v
  switch.SvSwitch:
    descr: The switch state associated with the switch
    inverseOf: svSwitch.Switch
    kind: object
    label: SvSwitch
    max: inf
    range: SvSwitch
    rdfProp: cim:Switch.SvSwitch
  switch.locked:
    descr: |-
      If true, the switch is locked. The resulting switch state is a combination of locked and Switch.open attributes as follows:
      <ul>
      	<li>locked=true and Switch.open=true. The resulting state is open and locked;</li>
      	<li>locked=false and Switch.open=true. The resulting state is open;</li>
      	<li>locked=false and Switch.open=false. The resulting state is closed.</li>
      </ul>
    kind: literal
    label: locked
    range: boolean
    rdfProp: cim:Switch.locked
  switch.normalOpen:
    descr: The attribute is used in cases when no Measurement for the status value is present. If the Switch has a status measurement the Discrete.normalValue is expected to match with the Switch.normalOpen
    kind: literal
    label: normalOpen
    range: boolean
    rdfProp: cim:Switch.normalOpen
  switch.open:
    descr: The attribute tells if the switch is considered open when used as input to topology processing
    kind: literal
    label: open
    range: boolean
    rdfProp: cim:Switch.open
  switch.ratedCurrent:
    descr: |-
      The maximum continuous current carrying capacity in amps governed by the device material and construction.
      The attribute shall be a positive value
    kind: literal
    label: ratedCurrent
    range: double
    rdfProp: cim:Switch.ratedCurrent
  switch.retained:
    descr: Branch is retained in the topological solution.  The flow through retained switches will normally be calculated in power flow
    kind: literal
    label: retained
    range: boolean
    rdfProp: cim:Switch.retained
  synchronousMachine.maxQ:
    descr: Maximum reactive power limit. This is the maximum (nameplate) limit for the unit
    kind: literal
    label: maxQ
    range: double
    rdfProp: cim:SynchronousMachine.maxQ
  synchronousMachine.minQ:
    descr: Minimum reactive power limit for the unit
    kind: literal
    label: minQ
    range: double
    rdfProp: cim:SynchronousMachine.minQ
  synchronousMachine.operatingMode:
    descr: Current mode of operation
    kind: object
    label: operatingMode
    range: SynchronousMachineOperatingMode
    rdfProp: cim:SynchronousMachine.operatingMode
  synchronousMachine.qPercent:
    descr: Part of the coordinated reactive control that comes from this machine. The attribute is used as a participation factor not necessarily summing up to 100% for the participating devices in the control
    kind: literal
    label: qPercent
    range: double
    rdfProp: cim:SynchronousMachine.qPercent
  synchronousMachine.r:
    descr: 'Equivalent resistance (RG) of generator. RG is considered for the calculation of all currents, except for the calculation of the peak current ip. Used for short circuit data exchange according to IEC 60909'
    kind: literal
    label: r
    range: double
    rdfProp: cim:SynchronousMachine.r
  synchronousMachine.referencePriority:
    descr: Priority of unit for use as powerflow voltage phase angle reference bus selection. 0 = don t care (default) 1 = highest priority. 2 is less than 1 and so on
    kind: literal
    label: referencePriority
    range: integer
    rdfProp: cim:SynchronousMachine.referencePriority
  synchronousMachine.type:
    descr: Modes that this synchronous machine can operate in
    kind: object
    label: type
    range: SynchronousMachineKind
    rdfProp: cim:SynchronousMachine.type
  tapChanger.SvTapStep:
    descr: The tap step state associated with the tap changer
    inverseOf: svTapStep.TapChanger
    kind: object
    label: SvTapStep
    range: SvTapStep
    rdfProp: cim:TapChanger.SvTapStep
  tapChanger.TapChangerControl:
    descr: The regulating control scheme in which this tap changer participates
    inverseOf: tapChangerControl.TapChanger
    kind: object
    label: TapChangerControl
    range: TapChangerControl
    rdfProp: cim:TapChanger.TapChangerControl
  tapChanger.controlEnabled:
    descr: 'Specifies the regulation status of the equipment.  True is regulating, false is not regulating'
    kind: literal
    label: controlEnabled
    range: boolean
    rdfProp: cim:TapChanger.controlEnabled
  tapChanger.highStep:
    descr: |-
      Highest possible tap step position, advance from neutral.
      The attribute shall be greater than lowStep
    kind: literal
    label: highStep
    range: integer
    rdfProp: cim:TapChanger.highStep
  tapChanger.lowStep:
    descr: 'Lowest possible tap step position, retard from neutral'
    kind: literal
    label: lowStep
    range: integer
    rdfProp: cim:TapChanger.lowStep
  tapChanger.ltcFlag:
    descr: Specifies whether or not a TapChanger has load tap changing capabilities
    kind: literal
    label: ltcFlag
    range: boolean
    rdfProp: cim:TapChanger.ltcFlag
  tapChanger.neutralStep:
    descr: |-
      The neutral tap step position for this winding.
      The attribute shall be equal to or greater than lowStep and equal or less than highStep.
      It is the step position where the voltage is neutralU when the other terminals of the transformer are at the ratedU.  If there are other tap changers on the transformer those taps are kept constant at their neutralStep
    kind: literal
    label: neutralStep
    range: integer
    rdfProp: cim:TapChanger.neutralStep
  tapChanger.neutralU:
    descr: 'Voltage at which the winding operates at the neutral tap setting. It is the voltage at the terminal of the PowerTransformerEnd associated with the tap changer when all tap changers on the transformer are at their neutralStep position.  Normally neutralU of the tap changer is the same as ratedU of the PowerTransformerEnd, but it can differ in special cases such as when the tapping mechanism is separate from the winding more common on lower voltage transformers. This attribute is not relevant for PhaseTapChangerAsymmetrical,'
    kind: literal
    label: neutralU
    range: double
    rdfProp: cim:TapChanger.neutralU
  tapChanger.normalStep:
    descr: |-
      The tap step position used in "normal" network operation for this winding. For a "Fixed" tap changer indicates the current physical tap setting.
      The attribute shall be equal to or greater than lowStep and equal to or less than highStep
    kind: literal
    label: normalStep
    range: integer
    rdfProp: cim:TapChanger.normalStep
  tapChanger.step:
    descr: |-
      Tap changer position.
      Starting step for a steady state solution. Non integer values are allowed to support continuous tap variables. The reasons for continuous value are to support study cases where no discrete tap changer has yet been designed, a solution where a narrow voltage band forces the tap step to oscillate or to accommodate for a continuous solution as input.
      The attribute shall be equal to or greater than lowStep and equal to or less than highStep
    kind: literal
    label: step
    range: double
    rdfProp: cim:TapChanger.step
  tapChangerControl.TapChanger:
    descr: The tap changers that participates in this regulating tap control scheme
    inverseOf: tapChanger.TapChangerControl
    kind: object
    label: TapChanger
    max: inf
    range: TapChangerInterface
    rdfProp: cim:TapChangerControl.TapChanger
  terminal.AuxiliaryEquipment:
    descr: The auxiliary equipment connected to the terminal
    inverseOf: auxiliaryEquipment.Terminal
    kind: object
    label: AuxiliaryEquipment
    max: inf
    range: AuxiliaryEquipmentInterface
    rdfProp: cim:Terminal.AuxiliaryEquipment
  terminal.ConductingEquipment:
    descr: The conducting equipment of the terminal.  Conducting equipment have  terminals that may be connected to other conducting equipment terminals via connectivity nodes or topological nodes
    inverseOf: conductingEquipment.Terminals
    kind: object
    label: ConductingEquipment
    range: ConductingEquipmentInterface
    rdfProp: cim:Terminal.ConductingEquipment
  terminal.ConnectivityNode:
    descr: The connectivity node to which this terminal connects with zero impedance
    inverseOf: connectivityNode.Terminals
    kind: object
    label: ConnectivityNode
    range: ConnectivityNode
    rdfProp: cim:Terminal.ConnectivityNode
  terminal.RegulatingControl:
    descr: The controls regulating this terminal
    inverseOf: regulatingControl.Terminal
    kind: object
    label: RegulatingControl
    max: inf
    range: RegulatingControlInterface
    rdfProp: cim:Terminal.RegulatingControl
  terminal.SvPowerFlow:
    descr: The power flow state variable associated with the terminal
    inverseOf: svPowerFlow.Terminal
    kind: object
    label: SvPowerFlow
    range: SvPowerFlow
    rdfProp: cim:Terminal.SvPowerFlow
  terminal.TopologicalNode:
    descr: 'The topological node associated with the terminal.   This can be used as an alternative to the connectivity node path to topological node, thus making it unnecessary to model connectivity nodes in some cases.   Note that the if connectivity nodes are in the model, this association would probably not be used as an input specification'
    inverseOf: topologicalNode.Terminal
    kind: object
    label: TopologicalNode
    range: TopologicalNode
    rdfProp: cim:Terminal.TopologicalNode
  terminal.TransformerEnd:
    descr: All transformer ends connected at this terminal
    inverseOf: transformerEnd.Terminal
    kind: object
    label: TransformerEnd
    max: inf
    range: TransformerEndInterface
    rdfProp: cim:Terminal.TransformerEnd
  terminal.phases:
    descr: 'Represents the normal network phasing condition. If the attribute is missing, three phases (ABC) shall be assumed, except for terminals of grounding classes (specializations of EarthFaultCompensator, GroundDisconnector, and Ground) which will be assumed to be N. Therefore, phase code ABCN is explicitly declared when needed, e.g. for star point grounding equipment. The phase code on terminals connecting same ConnectivityNode or same TopologicalNode as well as for equipment between two terminals shall'
    kind: object
    label: phases
    range: PhaseCode
    rdfProp: cim:Terminal.phases
  textDiagramObject.text:
    descr: The text that is displayed by this text diagram object
    kind: literal
    label: text
    range: string
    rdfProp: cim:TextDiagramObject.text
  topologicalIsland.AngleRefTopologicalNode:
    descr: 'The angle reference for the island.   Normally there is one TopologicalNode that is selected as the angle reference for each island.   Other reference schemes exist, so the association is typically optional'
    inverseOf: topologicalNode.AngleRefTopologicalIsland
    kind: object
    label: AngleRefTopologicalNode
    range: TopologicalNode
    rdfProp: cim:TopologicalIsland.AngleRefTopologicalNode
  topologicalIsland.TopologicalNodes:
    descr: A topological node belongs to a topological island
    inverseOf: topologicalNode.TopologicalIsland
    kind: object
    label: TopologicalNodes
    max: inf
    range: TopologicalNode
    rdfProp: cim:TopologicalIsland.TopologicalNodes
  topologicalNode.AngleRefTopologicalIsland:
    descr: The island for which the node is an angle reference.   Normally there is one angle reference node for each island
    inverseOf: topologicalIsland.AngleRefTopologicalNode
    kind: object
    label: AngleRefTopologicalIsland
    range: TopologicalIsland
    rdfProp: cim:TopologicalNode.AngleRefTopologicalIsland
  topologicalNode.BaseVoltage:
    descr: The base voltage of the topological node
    inverseOf: baseVoltage.TopologicalNode
    kind: object
    label: BaseVoltage
    range: BaseVoltage
    rdfProp: cim:TopologicalNode.BaseVoltage
  topologicalNode.ConnectivityNodeContainer:
    descr: The connectivity node container to which the topological node belongs
    inverseOf: connectivityNodeContainer.TopologicalNode
    kind: object
    label: ConnectivityNodeContainer
    range: ConnectivityNodeContainerInterface
    rdfProp: cim:TopologicalNode.ConnectivityNodeContainer
  topologicalNode.ConnectivityNodes:
    descr: The connectivity nodes combine together to form this topological node.  May depend on the current state of switches in the network
    inverseOf: connectivityNode.TopologicalNode
    kind: object
    label: ConnectivityNodes
    max: inf
    range: ConnectivityNode
    rdfProp: cim:TopologicalNode.ConnectivityNodes
  topologicalNode.SvVoltage:
    descr: The state voltage associated with the topological node
    inverseOf: svVoltage.TopologicalNode
    kind: object
    label: SvVoltage
    range: SvVoltage
    rdfProp: cim:TopologicalNode.SvVoltage
  topologicalNode.Terminal:
    descr: 'The terminals associated with the topological node.   This can be used as an alternative to the connectivity node path to terminal, thus making it unnecessary to model connectivity nodes in some cases.   Note that if connectivity nodes are in the model, this association would probably not be used as an input specification'
    inverseOf: terminal.TopologicalNode
    kind: object
    label: Terminal
    max: inf
    range: Terminal
    rdfProp: cim:TopologicalNode.Terminal
  topologicalNode.TopologicalIsland:
    descr: A topological node belongs to a topological island
    inverseOf: topologicalIsland.TopologicalNodes
    kind: object
    label: TopologicalIsland
    range: TopologicalIsland
    rdfProp: cim:TopologicalNode.TopologicalIsland
  transformerEnd.BaseVoltage:
    descr: Base voltage of the transformer end.  This is essential for PU calculation
    inverseOf: baseVoltage.TransformerEnds
    kind: object
    label: BaseVoltage
    range: BaseVoltage
    rdfProp: cim:TransformerEnd.BaseVoltage
  transformerEnd.RatioTapChanger:
    descr: Ratio tap changer associated with this transformer end
    inverseOf: ratioTapChanger.TransformerEnd
    kind: object
    label: RatioTapChanger
    range: RatioTapChanger
    rdfProp: cim:TransformerEnd.RatioTapChanger
  transformerEnd.Terminal:
    descr: Terminal of the power transformer to which this transformer end belongs
    inverseOf: terminal.TransformerEnd
    kind: object
    label: Terminal
    range: Terminal
    rdfProp: cim:TransformerEnd.Terminal
  transformerEnd.endNumber:
    descr: "Number for this transformer end, corresponding to the end's order in the power transformer vector group or phase angle clock number.  Highest voltage winding should be 1.  Each end within a power transformer should have a unique subsequent end number.   Note the transformer end number need not match the terminal sequence number"
    kind: literal
    label: endNumber
    range: integer
    rdfProp: cim:TransformerEnd.endNumber
  transformerEnd.grounded:
    descr: (for Yn and Zn connections) True if the neutral is solidly grounded
    kind: literal
    label: grounded
    range: boolean
    rdfProp: cim:TransformerEnd.grounded
  voltageLevel.BaseVoltage:
    descr: The base voltage used for all equipment within the voltage level
    inverseOf: baseVoltage.VoltageLevel
    kind: object
    label: BaseVoltage
    range: BaseVoltage
    rdfProp: cim:VoltageLevel.BaseVoltage
  voltageLevel.Bays:
    descr: The bays within this voltage level
    inverseOf: bay.VoltageLevel
    kind: object
    label: Bays
    max: inf
    range: Bay
    rdfProp: cim:VoltageLevel.Bays
  voltageLevel.Substation:
    descr: The substation of the voltage level
    inverseOf: substation.VoltageLevels
    kind: object
    label: Substation
    range: Substation
    rdfProp: cim:VoltageLevel.Substation
  voltageLimit.normalValue:
    descr: The normal limit on voltage. High or low limit nature of the limit depends upon the properties of the operational limit type. The attribute shall be a positive value or zero
    kind: literal
    label: normalValue
    range: double
    rdfProp: cim:VoltageLimit.normalValue
  voltageLimit.value:
    descr: Limit on voltage. High or low limit nature of the limit depends upon the properties of the operational limit type. The attribute shall be a positive value or zero
    kind: literal
    label: value
    range: double
    rdfProp: cim:VoltageLimit.value
specialPrefixes:
  ontology_iri: https://cim.ucaiug.io/ns#
  vocab_iri: https://cim.ucaiug.io/ns#
  vocab_prefix: cim
